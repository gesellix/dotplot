
package org.dotplot.dpaas.ws;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "WebServicePortService", targetNamespace = "http://dpaas.dotplot.org/", wsdlLocation = "http://localhost:8080/dpaas?wsdl")
public class WebServicePortService
    extends Service
{
	
	private final static URL WEBSERVICEPORTSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(org.dotplot.dpaas.ws.WebServicePortService.class.getName());

    static private String wsdlurl = "http://localhost:8080/dpaas?wsdl";
    
    static public void setWsdlUrl(String url) {
    	wsdlurl = url;
    }
    
    static {
       URL url = null;
        try {
            URL baseUrl;
            baseUrl = org.dotplot.dpaas.ws.WebServicePortService.class.getResource(".");
            url = new URL(baseUrl, wsdlurl);
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://localhost:8080/dpaas?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        WEBSERVICEPORTSERVICE_WSDL_LOCATION = url;
    }

    public WebServicePortService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebServicePortService() {
        super(WEBSERVICEPORTSERVICE_WSDL_LOCATION, new QName("http://dpaas.dotplot.org/", "WebServicePortService"));
    }

    /**
     * 
     * @return
     *     returns WebServicePort
     */
    @WebEndpoint(name = "WebServicePortPort")
    public WebServicePort getWebServicePortPort() {
        return super.getPort(new QName("http://dpaas.dotplot.org/", "WebServicePortPort"), WebServicePort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebServicePort
     */
    //@WebEndpoint(name = "WebServicePortPort")
    //public WebServicePort getWebServicePortPort(WebServiceFeature... features) {
    //    return super.getPort(new QName("http://dpaas.dotplot.org/", "WebServicePortPort"), WebServicePort.class, features);
    //}

}
