/* The following code was generated by JFlex 1.4 on 27.06.04 15:31 */
package org.dotplot.tokenizer.service;

import org.dotplot.core.ISourceType;
import org.dotplot.tokenizer.EOLToken;
import org.dotplot.tokenizer.KeyWordToken;
import org.dotplot.tokenizer.Token;
import org.dotplot.tokenizer.TokenType;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4 on 27.06.04 15:31 from the specification file
 * <tt>C:/Programme/eclipse/workspace/org.dotplot/src/org/dotplot/tokenizer/scanner/flexfiles/PHPScanner.flex</tt>
 * .
 */
public class PHPScanner extends BaseScanner {
    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int LINE_COMMENT = 2;

    public static final int YYINITIAL = 0;

    public static final int COMMENT = 1;

    public static final int PHP = 3;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED = "\1\2\7\0\1\2\1\3\1\1\2\4\1\5\22\0\1\3\1\74"
	    + "\1\10\1\0\1\31\1\0\1\75\1\0\1\100\1\101\1\7\1\67"
	    + "\1\71\1\70\1\106\1\6\1\111\11\113\1\107\1\65\1\73\1\66"
	    + "\1\72\1\110\1\0\1\17\1\112\1\57\1\112\1\14\1\52\1\42"
	    + "\1\45\1\41\1\112\1\60\1\51\1\112\1\40\1\35\1\16\1\112"
	    + "\1\20\1\21\1\56\1\62\1\53\1\37\3\112\1\102\1\105\1\103"
	    + "\1\0\1\15\1\0\1\11\1\46\1\26\1\13\1\44\1\24\1\33"
	    + "\1\55\1\30\1\112\1\47\1\23\1\63\1\12\1\22\1\43\1\54"
	    + "\1\32\1\36\1\27\1\25\1\34\1\61\1\50\1\64\1\112\1\76"
	    + "\1\104\1\77\7\0\1\4\u1fa2\0\2\4\udfd6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\4\0\1\1\1\2\1\1\1\3\1\2\1\1\1\4"
	    + "\1\3\1\2\2\4\2\5\1\4\1\6\1\7\1\10"
	    + "\14\11\1\4\14\11\1\12\1\13\1\14\1\15\1\16"
	    + "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
	    + "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"
	    + "\1\37\1\40\1\41\1\42\1\43\1\0\1\11\1\44"
	    + "\2\11\1\45\6\11\1\46\10\11\1\47\4\0\24\11"
	    + "\1\50\1\51\1\52\1\53\1\4\1\54\1\55\1\56"
	    + "\1\57\15\11\1\60\6\11\4\0\3\11\1\61\17\11"
	    + "\1\62\3\11\1\63\14\11\1\64\2\11\1\65\4\11"
	    + "\4\0\7\11\1\66\7\11\1\67\1\70\1\71\1\11"
	    + "\1\72\3\11\1\73\5\11\1\74\13\11\1\75\2\11"
	    + "\1\76\1\77\1\0\1\100\1\0\10\11\1\101\2\11"
	    + "\1\102\4\11\1\103\1\104\1\105\1\106\11\11\1\107"
	    + "\7\11\2\0\1\110\1\11\1\111\1\11\1\112\1\11"
	    + "\1\113\1\114\1\11\1\115\2\11\1\116\1\11\1\117"
	    + "\1\120\1\121\1\122\1\11\1\123\5\11\1\124\3\11"
	    + "\1\125\6\0\1\126\1\127\5\11\1\130\1\11\1\131"
	    + "\1\132\1\133\2\11\1\134\1\135\2\11\6\0\1\11"
	    + "\1\136\3\11\1\137\1\140\2\11\1\141\1\11\1\142"
	    + "\5\0\3\11\1\143\3\11\5\0\1\11\1\144\1\145"
	    + "\1\146\2\11\5\0\1\11\1\147\1\150\6\0\1\151"
	    + "\6\0\1\152\3\0\1\153\2\0\1\154\2\0\1\155" + "\2\0\1\156\1\157";

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"
	    + "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u02f8\0\u0390\0\u03dc\0\u017c"
	    + "\0\u0428\0\u017c\0\u0474\0\u017c\0\u04c0\0\u050c\0\u0558\0\u05a4"
	    + "\0\u05f0\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804"
	    + "\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64"
	    + "\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u017c\0\u0c78"
	    + "\0\u017c\0\u017c\0\u017c\0\u0cc4\0\u0d10\0\u017c\0\u017c\0\u017c"
	    + "\0\u017c\0\u017c\0\u017c\0\u017c\0\u017c\0\u017c\0\u017c\0\u017c"
	    + "\0\u017c\0\u0d5c\0\u0da8\0\u0130\0\u02f8\0\u02f8\0\u017c\0\u017c"
	    + "\0\u0df4\0\u0e40\0\u06d4\0\u0e8c\0\u0ed8\0\u06d4\0\u0f24\0\u0f70"
	    + "\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\u06d4\0\u10ec\0\u1138\0\u1184"
	    + "\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u06d4\0\u134c\0\u1398"
	    + "\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8"
	    + "\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858"
	    + "\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u017c"
	    + "\0\u017c\0\u017c\0\u0df4\0\u06d4\0\u06d4\0\u06d4\0\u06d4\0\u1ab8"
	    + "\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18"
	    + "\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78"
	    + "\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8"
	    + "\0\u2224\0\u2270\0\u06d4\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec"
	    + "\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c"
	    + "\0\u2698\0\u26e4\0\u06d4\0\u2730\0\u277c\0\u27c8\0\u017c\0\u2814"
	    + "\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74"
	    + "\0\u2ac0\0\u2b0c\0\u2b58\0\u06d4\0\u2ba4\0\u2bf0\0\u06d4\0\u2c3c"
	    + "\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c"
	    + "\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u3064\0\u06d4\0\u30b0"
	    + "\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u06d4"
	    + "\0\u06d4\0\u3310\0\u06d4\0\u335c\0\u33a8\0\u33f4\0\u06d4\0\u3440"
	    + "\0\u348c\0\u34d8\0\u3524\0\u3570\0\u06d4\0\u35bc\0\u3608\0\u3654"
	    + "\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u381c\0\u3868\0\u38b4"
	    + "\0\u06d4\0\u3900\0\u394c\0\u017c\0\u017c\0\u3998\0\u017c\0\u39e4"
	    + "\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44"
	    + "\0\u06d4\0\u3c90\0\u3cdc\0\u06d4\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c"
	    + "\0\u06d4\0\u06d4\0\u06d4\0\u06d4\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c"
	    + "\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u06d4\0\u4104\0\u4150"
	    + "\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u06d4"
	    + "\0\u43b0\0\u06d4\0\u43fc\0\u06d4\0\u4448\0\u06d4\0\u06d4\0\u4494"
	    + "\0\u44e0\0\u452c\0\u4578\0\u06d4\0\u45c4\0\u06d4\0\u06d4\0\u06d4"
	    + "\0\u06d4\0\u4610\0\u06d4\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c"
	    + "\0\u06d4\0\u47d8\0\u4824\0\u4870\0\u48bc\0\u4908\0\u4954\0\u49a0"
	    + "\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u06d4\0\u4b1c\0\u4b68\0\u4bb4"
	    + "\0\u4c00\0\u4c4c\0\u06d4\0\u4c98\0\u06d4\0\u06d4\0\u06d4\0\u4ce4"
	    + "\0\u4d30\0\u06d4\0\u06d4\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac"
	    + "\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc\0\u06d4\0\u5028\0\u5074\0\u50c0"
	    + "\0\u06d4\0\u06d4\0\u510c\0\u5158\0\u06d4\0\u51a4\0\u017c\0\u51f0"
	    + "\0\u523c\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u5404\0\u06d4"
	    + "\0\u5450\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618\0\u5664"
	    + "\0\u56b0\0\u06d4\0\u06d4\0\u06d4\0\u56fc\0\u5748\0\u5794\0\u57e0"
	    + "\0\u582c\0\u5878\0\u58c4\0\u5910\0\u06d4\0\u06d4\0\u595c\0\u59a8"
	    + "\0\u59f4\0\u5a40\0\u5a8c\0\u5ad8\0\u06d4\0\u5b24\0\u5b70\0\u5bbc"
	    + "\0\u5c08\0\u5c54\0\u5ca0\0\u017c\0\u5cec\0\u5d38\0\u5d84\0\u017c"
	    + "\0\u5dd0\0\u5e1c\0\u017c\0\u5e68\0\u5eb4\0\u017c\0\u5f00\0\u5f4c"
	    + "\0\u017c\0\u017c";

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\5\1\6\1\7\1\10\1\5\1\11\65\5\1\12"
	    + "\20\5\1\13\1\6\1\14\1\10\1\15\1\11\1\16"
	    + "\1\17\105\13\1\20\1\14\1\10\1\13\1\21\106\13"
	    + "\1\22\1\6\2\10\1\6\1\11\1\23\1\24\1\25"
	    + "\1\26\1\27\1\30\1\31\1\32\1\33\3\34\1\35"
	    + "\1\36\1\37\1\34\1\40\1\34\1\41\1\42\1\43"
	    + "\1\44\1\45\1\34\1\46\1\34\1\47\2\34\1\50"
	    + "\1\51\1\34\1\52\1\34\1\53\1\34\1\54\3\34"
	    + "\1\55\2\34\1\56\3\34\1\57\1\60\1\61\1\62"
	    + "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"
	    + "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"
	    + "\1\103\1\34\1\103\1\5\1\0\1\5\1\0\1\5"
	    + "\1\0\106\5\114\0\1\5\1\0\1\7\1\10\1\5"
	    + "\1\0\106\5\2\0\2\10\111\0\1\6\112\0\1\5"
	    + "\1\0\1\5\1\0\1\5\1\0\102\5\1\104\3\5"
	    + "\1\13\1\0\1\13\1\0\1\13\1\0\107\13\1\0"
	    + "\1\14\1\10\1\13\1\0\107\13\1\0\1\13\1\0"
	    + "\1\13\1\0\1\13\1\105\105\13\1\0\1\13\1\0"
	    + "\1\13\1\0\1\106\105\13\1\0\1\20\120\0\1\107"
	    + "\1\110\104\0\1\111\1\0\112\111\11\0\1\34\1\112"
	    + "\16\34\1\0\4\34\1\113\26\34\25\0\2\34\11\0"
	    + "\11\34\1\114\6\34\1\0\12\34\1\115\20\34\25\0"
	    + "\2\34\11\0\11\34\1\116\5\34\1\117\1\0\12\34"
	    + "\1\120\20\34\25\0\2\34\11\0\4\34\1\121\13\34"
	    + "\1\0\33\34\25\0\2\34\11\0\4\34\1\122\13\34"
	    + "\1\0\33\34\25\0\2\34\11\0\20\34\1\0\13\34"
	    + "\1\123\17\34\25\0\2\34\11\0\20\34\1\0\33\34"
	    + "\25\0\2\34\11\0\12\34\1\124\5\34\1\0\1\125"
	    + "\32\34\25\0\2\34\11\0\17\34\1\126\1\0\33\34"
	    + "\25\0\2\34\11\0\11\34\1\127\2\34\1\130\3\34"
	    + "\1\0\33\34\25\0\2\34\11\0\1\131\10\34\1\132"
	    + "\1\133\1\134\4\34\1\0\33\34\25\0\2\34\11\0"
	    + "\1\34\1\135\11\34\1\136\4\34\1\0\33\34\25\0"
	    + "\2\34\11\0\1\137\4\0\1\140\10\0\1\141\15\0"
	    + "\1\142\57\0\20\34\1\0\12\34\1\143\20\34\25\0"
	    + "\2\34\11\0\12\34\1\144\5\34\1\0\33\34\25\0"
	    + "\2\34\11\0\1\145\16\34\1\146\1\0\33\34\25\0"
	    + "\2\34\11\0\16\34\1\147\1\34\1\0\27\34\1\150"
	    + "\3\34\25\0\2\34\11\0\20\34\1\0\30\34\1\151"
	    + "\2\34\25\0\2\34\11\0\1\152\17\34\1\0\1\153"
	    + "\32\34\25\0\2\34\11\0\1\34\1\154\10\34\1\155"
	    + "\2\34\1\156\2\34\1\0\2\34\1\157\13\34\1\160"
	    + "\12\34\1\161\1\34\25\0\2\34\11\0\20\34\1\0"
	    + "\1\162\32\34\25\0\2\34\11\0\11\34\1\163\6\34"
	    + "\1\0\33\34\25\0\2\34\11\0\6\34\1\164\11\34"
	    + "\1\0\33\34\25\0\2\34\11\0\7\34\1\165\10\34"
	    + "\1\0\33\34\25\0\2\34\11\0\20\34\1\0\23\34"
	    + "\1\166\7\34\25\0\2\34\66\0\1\167\113\0\1\170"
	    + "\113\0\1\171\117\0\1\172\132\0\1\103\1\0\1\103"
	    + "\1\111\1\0\6\111\1\173\103\111\11\0\2\34\1\174"
	    + "\15\34\1\0\33\34\25\0\2\34\11\0\16\34\1\175"
	    + "\1\34\1\0\33\34\25\0\2\34\11\0\20\34\1\0"
	    + "\27\34\1\176\3\34\25\0\2\34\11\0\20\34\1\0"
	    + "\12\34\1\177\20\34\25\0\2\34\11\0\13\34\1\200"
	    + "\1\34\1\201\2\34\1\0\33\34\25\0\2\34\11\0"
	    + "\3\34\1\202\1\34\1\203\1\204\11\34\1\0\5\34"
	    + "\1\205\25\34\25\0\2\34\11\0\20\34\1\0\4\34"
	    + "\1\206\12\34\1\207\1\210\6\34\1\211\3\34\25\0"
	    + "\2\34\11\0\5\34\1\212\12\34\1\0\33\34\25\0"
	    + "\2\34\11\0\2\34\1\213\15\34\1\0\33\34\25\0"
	    + "\2\34\11\0\20\34\1\0\4\34\1\214\26\34\25\0"
	    + "\2\34\11\0\20\34\1\0\1\215\32\34\25\0\2\34"
	    + "\11\0\1\34\1\216\16\34\1\0\33\34\25\0\2\34"
	    + "\11\0\20\34\1\0\4\34\1\217\26\34\25\0\2\34"
	    + "\11\0\1\34\1\220\16\34\1\0\33\34\25\0\2\34"
	    + "\11\0\1\221\17\34\1\0\33\34\25\0\2\34\11\0"
	    + "\14\34\1\222\3\34\1\0\33\34\25\0\2\34\11\0"
	    + "\15\34\1\223\2\34\1\0\33\34\25\0\2\34\32\0"
	    + "\1\224\126\0\1\225\123\0\1\226\114\0\1\227\46\0"
	    + "\16\34\1\230\1\34\1\0\22\34\1\231\10\34\25\0"
	    + "\2\34\11\0\11\34\1\232\6\34\1\0\33\34\25\0"
	    + "\2\34\11\0\20\34\1\0\1\233\32\34\25\0\2\34"
	    + "\11\0\20\34\1\0\1\234\32\34\25\0\2\34\11\0"
	    + "\1\235\1\34\1\236\15\34\1\0\33\34\25\0\2\34"
	    + "\11\0\17\34\1\237\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\17\34\1\240\13\34\25\0\2\34\11\0"
	    + "\20\34\1\0\1\241\32\34\25\0\2\34\11\0\17\34"
	    + "\1\242\1\0\33\34\25\0\2\34\11\0\2\34\1\243"
	    + "\15\34\1\0\33\34\25\0\2\34\11\0\20\34\1\0"
	    + "\4\34\1\244\26\34\25\0\2\34\11\0\20\34\1\0"
	    + "\23\34\1\245\7\34\25\0\2\34\11\0\1\246\17\34"
	    + "\1\0\33\34\25\0\2\34\11\0\16\34\1\247\1\250"
	    + "\1\0\33\34\25\0\2\34\11\0\20\34\1\0\11\34"
	    + "\1\251\21\34\25\0\2\34\11\0\20\34\1\0\12\34"
	    + "\1\252\20\34\25\0\2\34\11\0\20\34\1\0\1\253"
	    + "\32\34\25\0\2\34\11\0\20\34\1\0\17\34\1\254"
	    + "\13\34\25\0\2\34\11\0\20\34\1\0\30\34\1\255"
	    + "\2\34\25\0\2\34\11\0\17\34\1\256\1\0\33\34"
	    + "\25\0\2\34\66\0\1\257\36\0\1\260\17\34\1\0"
	    + "\33\34\25\0\2\34\11\0\12\34\1\261\5\34\1\0"
	    + "\33\34\25\0\2\34\11\0\7\34\1\262\10\34\1\0"
	    + "\33\34\25\0\2\34\11\0\6\34\1\263\11\34\1\0"
	    + "\33\34\25\0\2\34\11\0\20\34\1\0\17\34\1\264"
	    + "\13\34\25\0\2\34\11\0\6\34\1\265\11\34\1\0"
	    + "\33\34\25\0\2\34\11\0\12\34\1\266\5\34\1\0"
	    + "\33\34\25\0\2\34\11\0\20\34\1\0\7\34\1\267"
	    + "\23\34\25\0\2\34\11\0\20\34\1\0\7\34\1\270"
	    + "\23\34\25\0\2\34\11\0\1\271\17\34\1\0\33\34"
	    + "\25\0\2\34\11\0\4\34\1\272\13\34\1\0\33\34"
	    + "\25\0\2\34\11\0\4\34\1\273\13\34\1\0\33\34"
	    + "\25\0\2\34\11\0\16\34\1\274\1\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\275\20\34"
	    + "\25\0\2\34\11\0\15\34\1\276\2\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\277\20\34"
	    + "\25\0\2\34\11\0\16\34\1\300\1\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\4\34\1\301\26\34"
	    + "\25\0\2\34\11\0\1\34\1\302\16\34\1\0\33\34"
	    + "\25\0\2\34\11\0\12\34\1\303\5\34\1\0\33\34"
	    + "\25\0\2\34\33\0\1\304\76\0\1\305\125\0\1\306"
	    + "\141\0\1\307\46\0\14\34\1\310\3\34\1\0\33\34"
	    + "\25\0\2\34\11\0\14\34\1\311\3\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\14\34\1\312\16\34"
	    + "\25\0\2\34\11\0\16\34\1\313\1\34\1\0\33\34"
	    + "\25\0\2\34\11\0\16\34\1\314\1\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\25\34\1\315\5\34"
	    + "\25\0\2\34\11\0\16\34\1\316\1\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\17\34\1\317\13\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\320\20\34"
	    + "\25\0\2\34\11\0\1\34\1\321\16\34\1\0\33\34"
	    + "\25\0\2\34\11\0\2\34\1\322\10\34\1\323\3\34"
	    + "\1\324\1\0\4\34\1\325\22\34\1\326\3\34\25\0"
	    + "\2\34\11\0\20\34\1\0\12\34\1\327\20\34\25\0"
	    + "\2\34\11\0\11\34\1\330\6\34\1\0\33\34\25\0"
	    + "\2\34\11\0\12\34\1\331\5\34\1\0\33\34\25\0"
	    + "\2\34\11\0\20\34\1\0\12\34\1\332\20\34\25\0"
	    + "\2\34\11\0\16\34\1\333\1\34\1\0\33\34\25\0"
	    + "\2\34\11\0\16\34\1\334\1\34\1\0\33\34\25\0"
	    + "\2\34\11\0\1\335\17\34\1\0\33\34\25\0\2\34"
	    + "\11\0\10\34\1\336\7\34\1\0\33\34\25\0\2\34"
	    + "\11\0\3\34\1\337\14\34\1\0\33\34\25\0\2\34"
	    + "\11\0\12\34\1\340\5\34\1\0\33\34\25\0\2\34"
	    + "\11\0\14\34\1\341\3\34\1\0\33\34\25\0\2\34"
	    + "\11\0\1\342\17\34\1\0\33\34\25\0\2\34\11\0"
	    + "\7\34\1\343\10\34\1\0\33\34\25\0\2\34\11\0"
	    + "\7\34\1\344\10\34\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\17\34\1\345\13\34\25\0\2\34\11\0"
	    + "\7\34\1\346\10\34\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\12\34\1\347\20\34\25\0\2\34\11\0"
	    + "\20\34\1\0\6\34\1\350\24\34\25\0\2\34\11\0"
	    + "\20\34\1\0\17\34\1\351\13\34\25\0\2\34\11\0"
	    + "\20\34\1\0\15\34\1\352\15\34\25\0\2\34\11\0"
	    + "\20\34\1\0\3\34\1\353\15\34\1\354\11\34\25\0"
	    + "\2\34\11\0\13\34\1\355\4\34\1\0\33\34\25\0"
	    + "\2\34\11\0\1\356\17\34\1\0\33\34\25\0\2\34"
	    + "\11\0\16\34\1\357\1\34\1\0\33\34\25\0\2\34"
	    + "\11\0\17\34\1\360\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\4\34\1\361\26\34\25\0\2\34\11\0"
	    + "\15\34\1\362\2\34\1\0\33\34\25\0\2\34\11\0"
	    + "\14\34\1\363\3\34\1\0\33\34\25\0\2\34\26\0"
	    + "\1\364\5\0\1\365\74\0\1\366\134\0\1\367\73\0"
	    + "\1\370\106\0\20\34\1\0\1\371\32\34\25\0\2\34"
	    + "\11\0\17\34\1\372\1\0\33\34\25\0\2\34\11\0"
	    + "\1\373\17\34\1\0\33\34\25\0\2\34\11\0\14\34"
	    + "\1\374\3\34\1\0\33\34\25\0\2\34\11\0\17\34"
	    + "\1\375\1\0\33\34\25\0\2\34\11\0\12\34\1\376"
	    + "\5\34\1\0\33\34\25\0\2\34\11\0\15\34\1\377"
	    + "\2\34\1\0\33\34\25\0\2\34\11\0\1\34\1\u0100"
	    + "\16\34\1\0\33\34\25\0\2\34\11\0\16\34\1\u0101"
	    + "\1\34\1\0\33\34\25\0\2\34\11\0\20\34\1\0"
	    + "\12\34\1\u0102\20\34\25\0\2\34\11\0\11\34\1\u0103"
	    + "\6\34\1\0\33\34\25\0\2\34\11\0\13\34\1\u0104"
	    + "\4\34\1\0\33\34\25\0\2\34\11\0\20\34\1\0"
	    + "\27\34\1\u0105\3\34\25\0\2\34\11\0\20\34\1\0"
	    + "\23\34\1\u0106\7\34\25\0\2\34\11\0\17\34\1\u0107"
	    + "\1\0\33\34\25\0\2\34\11\0\1\34\1\u0108\16\34"
	    + "\1\0\33\34\25\0\2\34\11\0\20\34\1\0\32\34"
	    + "\1\u0109\25\0\2\34\11\0\20\34\1\0\15\34\1\u010a"
	    + "\15\34\25\0\2\34\11\0\3\34\1\u010b\14\34\1\0"
	    + "\33\34\25\0\2\34\11\0\20\34\1\0\12\34\1\u010c"
	    + "\20\34\25\0\2\34\11\0\12\34\1\u010d\5\34\1\0"
	    + "\33\34\25\0\2\34\11\0\20\34\1\0\1\u010e\32\34"
	    + "\25\0\2\34\11\0\20\34\1\0\3\34\1\u010f\27\34"
	    + "\25\0\2\34\11\0\10\34\1\u0110\7\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\6\34\1\u0111\24\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\u0112\20\34"
	    + "\25\0\2\34\11\0\3\34\1\u0113\14\34\1\0\33\34"
	    + "\25\0\2\34\11\0\3\34\1\u0114\14\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\u0115\20\34"
	    + "\25\0\2\34\11\0\10\34\1\u0116\7\34\1\0\33\34"
	    + "\25\0\2\34\11\0\3\34\1\u0117\14\34\1\0\33\34"
	    + "\25\0\2\34\11\0\14\34\1\u0118\3\34\1\0\33\34"
	    + "\25\0\2\34\11\0\15\34\1\u0119\2\34\1\0\33\34"
	    + "\25\0\2\34\11\0\17\34\1\u011a\1\0\33\34\25\0"
	    + "\2\34\11\0\1\34\1\u011b\16\34\1\0\33\34\25\0"
	    + "\2\34\11\0\16\34\1\u011c\1\34\1\0\33\34\25\0"
	    + "\2\34\11\0\2\34\1\u011d\15\34\1\0\33\34\25\0"
	    + "\2\34\21\0\1\u011e\107\0\1\u011f\107\0\1\34\1\u0120"
	    + "\16\34\1\0\33\34\25\0\2\34\11\0\20\34\1\0"
	    + "\1\u0121\32\34\25\0\2\34\11\0\12\34\1\u0122\5\34"
	    + "\1\0\33\34\25\0\2\34\11\0\1\u0123\17\34\1\0"
	    + "\33\34\25\0\2\34\11\0\15\34\1\u0124\2\34\1\0"
	    + "\33\34\25\0\2\34\11\0\1\u0125\17\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\23\34\1\u0126\7\34"
	    + "\25\0\2\34\11\0\16\34\1\u0127\1\34\1\0\33\34"
	    + "\25\0\2\34\11\0\15\34\1\u0128\2\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\1\u0129\32\34\25\0"
	    + "\2\34\11\0\17\34\1\u012a\1\0\33\34\25\0\2\34"
	    + "\11\0\17\34\1\u012b\1\0\33\34\25\0\2\34\11\0"
	    + "\13\34\1\u012c\4\34\1\0\33\34\25\0\2\34\11\0"
	    + "\2\34\1\u012d\15\34\1\0\33\34\25\0\2\34\11\0"
	    + "\16\34\1\u012e\1\34\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\12\34\1\u012f\20\34\25\0\2\34\11\0"
	    + "\7\34\1\u0130\10\34\1\0\33\34\25\0\2\34\11\0"
	    + "\3\34\1\u0131\14\34\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\7\34\1\u0132\23\34\25\0\2\34\11\0"
	    + "\20\34\1\0\11\34\1\u0133\21\34\25\0\2\34\11\0"
	    + "\4\34\1\u0134\13\34\1\0\33\34\25\0\2\34\11\0"
	    + "\4\34\1\u0135\13\34\1\0\33\34\25\0\2\34\11\0"
	    + "\14\34\1\u0136\3\34\1\0\33\34\25\0\2\34\11\0"
	    + "\7\34\1\u0137\10\34\1\0\33\34\25\0\2\34\11\0"
	    + "\1\34\1\u0138\16\34\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\23\34\1\u0139\7\34\25\0\2\34\11\0"
	    + "\11\34\1\u013a\6\34\1\0\33\34\25\0\2\34\11\0"
	    + "\14\34\1\u013b\3\34\1\0\33\34\25\0\2\34\11\0"
	    + "\17\34\1\u013c\1\0\33\34\25\0\2\34\11\0\20\34"
	    + "\1\0\12\34\1\u013d\20\34\25\0\2\34\14\0\1\u013e"
	    + "\113\0\1\u013f\1\0\1\u0140\2\0\1\u0141\20\0\1\u0142"
	    + "\14\0\1\u0143\45\0\20\34\1\0\12\34\1\u0144\20\34"
	    + "\25\0\2\34\11\0\12\34\1\u0145\5\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\4\34\1\u0146\26\34"
	    + "\25\0\2\34\11\0\12\34\1\u0147\5\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\u0148\20\34"
	    + "\25\0\2\34\11\0\16\34\1\u0149\1\34\1\0\33\34"
	    + "\25\0\2\34\11\0\12\34\1\u014a\5\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\4\34\1\u014b\26\34"
	    + "\25\0\2\34\11\0\20\34\1\0\6\34\1\u014c\24\34"
	    + "\25\0\2\34\11\0\4\34\1\u014d\13\34\1\0\33\34"
	    + "\25\0\2\34\11\0\4\34\1\u014e\13\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\11\34\1\u014f\21\34"
	    + "\25\0\2\34\11\0\10\34\1\u0150\7\34\1\0\33\34"
	    + "\25\0\2\34\11\0\15\34\1\u0151\2\34\1\0\33\34"
	    + "\25\0\2\34\11\0\1\34\1\u0152\16\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\u0153\20\34"
	    + "\25\0\2\34\11\0\11\34\1\u0154\6\34\1\0\33\34"
	    + "\25\0\2\34\11\0\4\34\1\u0155\13\34\1\0\33\34"
	    + "\25\0\2\34\51\0\1\u0156\102\0\1\u0157\110\0\1\u0158"
	    + "\72\0\1\u0159\113\0\1\u015a\134\0\1\u015b\67\0\4\34"
	    + "\1\u015c\13\34\1\0\33\34\25\0\2\34\11\0\20\34"
	    + "\1\0\4\34\1\u015d\26\34\25\0\2\34\11\0\1\u015e"
	    + "\17\34\1\0\33\34\25\0\2\34\11\0\1\u015f\17\34"
	    + "\1\0\33\34\25\0\2\34\11\0\15\34\1\u0160\2\34"
	    + "\1\0\33\34\25\0\2\34\11\0\20\34\1\0\12\34"
	    + "\1\u0161\20\34\25\0\2\34\11\0\20\34\1\0\10\34"
	    + "\1\u0162\22\34\25\0\2\34\11\0\20\34\1\0\7\34"
	    + "\1\u0163\23\34\25\0\2\34\11\0\16\34\1\u0164\1\34"
	    + "\1\0\33\34\25\0\2\34\11\0\1\34\1\u0165\16\34"
	    + "\1\0\33\34\25\0\2\34\11\0\11\34\1\u0166\6\34"
	    + "\1\0\33\34\25\0\2\34\52\0\1\u0167\114\0\1\u0168"
	    + "\61\0\1\u0169\112\0\1\u016a\151\0\1\u016b\72\0\1\u016c"
	    + "\67\0\11\34\1\u016d\6\34\1\0\33\34\25\0\2\34"
	    + "\11\0\20\34\1\0\1\u016e\32\34\25\0\2\34\11\0"
	    + "\15\34\1\u016f\2\34\1\0\33\34\25\0\2\34\11\0"
	    + "\20\34\1\0\23\34\1\u0170\7\34\25\0\2\34\11\0"
	    + "\20\34\1\0\3\34\1\u0171\27\34\25\0\2\34\11\0"
	    + "\17\34\1\u0172\1\0\33\34\25\0\2\34\11\0\1\34"
	    + "\1\u0173\16\34\1\0\33\34\25\0\2\34\15\0\1\u0174"
	    + "\154\0\1\u0175\110\0\1\u0176\55\0\1\u0177\156\0\1\u0178"
	    + "\44\0\1\34\1\u0179\16\34\1\0\33\34\25\0\2\34"
	    + "\11\0\20\34\1\0\12\34\1\u017a\20\34\25\0\2\34"
	    + "\11\0\20\34\1\0\23\34\1\u017b\7\34\25\0\2\34"
	    + "\11\0\20\34\1\0\6\34\1\u017c\24\34\25\0\2\34"
	    + "\11\0\11\34\1\u017d\6\34\1\0\33\34\25\0\2\34"
	    + "\11\0\15\34\1\u017e\2\34\1\0\33\34\25\0\2\34"
	    + "\53\0\1\u017f\55\0\1\u0180\112\0\1\u0181\152\0\1\u0182"
	    + "\101\0\1\u0183\63\0\15\34\1\u0184\2\34\1\0\33\34"
	    + "\25\0\2\34\11\0\1\34\1\u0185\16\34\1\0\33\34"
	    + "\25\0\2\34\11\0\20\34\1\0\12\34\1\u0186\20\34"
	    + "\25\0\2\34\17\0\1\u0187\146\0\1\u0188\1\u0189\60\0"
	    + "\1\u018a\112\0\1\u018b\110\0\1\u018c\110\0\20\34\1\0"
	    + "\12\34\1\u018d\20\34\25\0\2\34\20\0\1\u018e\134\0"
	    + "\1\u018f\71\0\1\u0190\111\0\1\u0191\116\0\1\u0192\110\0"
	    + "\1\u0193\117\0\1\u0194\143\0\1\u0195\62\0\1\u0196\146\0"
	    + "\1\u0197\61\0\1\u0198\145\0\1\u0199\54\0\1\u019a\120\0"
	    + "\1\u019b\111\0\1\u019c\113\0\1\u019d\115\0\1\u019e\112\0"
	    + "\1\u019f\113\0\1\u01a0\114\0\1\u01a1\113\0\1\u01a2\72\0";

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
	    "Unkown internal scanner error", "Error: could not match input",
	    "Error: pushback value was too large" };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\4\0\1\1\1\11\11\1\1\11\1\1\1\11\1\1"
	    + "\1\11\32\1\1\11\1\1\3\11\2\1\14\11\5\1"
	    + "\2\11\1\0\25\1\4\0\25\1\3\11\31\1\4\0"
	    + "\27\1\1\11\24\1\4\0\54\1\2\11\1\0\1\11"
	    + "\1\0\45\1\2\0\36\1\6\0\22\1\6\0\13\1"
	    + "\1\11\5\0\7\1\5\0\6\1\5\0\3\1\6\0"
	    + "\1\1\6\0\1\11\3\0\1\11\2\0\1\11\2\0" + "\1\11\2\0\2\11";

    private static int[] zzUnpackAction() {
	int[] result = new int[418];
	int offset = 0;
	offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do {
		result[j++] = value;
	    } while (--count > 0);
	}
	return j;
    }

    private static int[] zzUnpackAttribute() {
	int[] result = new int[418];
	int offset = 0;
	offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do {
		result[j++] = value;
	    } while (--count > 0);
	}
	return j;
    }

    /**
     * Unpacks the compressed character translation table.
     * 
     * @param packed
     *            the packed character translation table
     * 
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
	char[] map = new char[0x10000];
	int i = 0; /* index in packed string */
	int j = 0; /* index in unpacked array */
	while (i < 194) {
	    int count = packed.charAt(i++);
	    char value = packed.charAt(i++);
	    do {
		map[j++] = value;
	    } while (--count > 0);
	}
	return map;
    }

    private static int[] zzUnpackRowMap() {
	int[] result = new int[418];
	int offset = 0;
	offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int high = packed.charAt(i++) << 16;
	    result[j++] = high | packed.charAt(i++);
	}
	return j;
    }

    private static int[] zzUnpackTrans() {
	int[] result = new int[24472];
	int offset = 0;
	offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    value--;
	    do {
		result[j++] = value;
	    } while (--count > 0);
	}
	return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /* user code: */

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    protected static TokenType[] tokenTypes = {
	    new TokenType(Token.TYPE_STRING, "comment", TokenType.KIND_OTHER),
	    new TokenType(Token.TYPE_NUMBER, "number", TokenType.KIND_OTHER),
	    new TokenType(Token.TYPE_IDENT, "identifier", TokenType.KIND_OTHER),
	    new TokenType(0, "and", TokenType.KIND_KEYWORD),
	    new TokenType(1, "E_PARSE", TokenType.KIND_KEYWORD),
	    new TokenType(2, "old_function", TokenType.KIND_KEYWORD),
	    new TokenType(3, "$argv", TokenType.KIND_KEYWORD),
	    new TokenType(4, "E_ERROR", TokenType.KIND_KEYWORD),
	    new TokenType(5, "or", TokenType.KIND_KEYWORD),
	    new TokenType(6, "as", TokenType.KIND_KEYWORD),
	    new TokenType(7, "E_WARNING", TokenType.KIND_KEYWORD),
	    new TokenType(8, "parent", TokenType.KIND_KEYWORD),
	    new TokenType(9, "argc", TokenType.KIND_KEYWORD),
	    new TokenType(10, "eval", TokenType.KIND_KEYWORD),
	    new TokenType(11, "PHP_OS", TokenType.KIND_KEYWORD),
	    new TokenType(12, "break", TokenType.KIND_KEYWORD),
	    new TokenType(13, "exit()", TokenType.KIND_KEYWORD),
	    new TokenType(14, "$PHP_SELF", TokenType.KIND_KEYWORD),
	    new TokenType(15, "case", TokenType.KIND_KEYWORD),
	    new TokenType(16, "PHP_VERSION", TokenType.KIND_KEYWORD),
	    new TokenType(17, "cfunction", TokenType.KIND_KEYWORD),
	    new TokenType(18, "FALSE", TokenType.KIND_KEYWORD),
	    new TokenType(19, "print()", TokenType.KIND_KEYWORD),
	    new TokenType(20, "class", TokenType.KIND_KEYWORD),
	    new TokenType(21, "for", TokenType.KIND_KEYWORD),
	    new TokenType(22, "require()", TokenType.KIND_KEYWORD),
	    new TokenType(23, "continue", TokenType.KIND_KEYWORD),
	    new TokenType(24, "foreach", TokenType.KIND_KEYWORD),
	    new TokenType(25, "require_once()", TokenType.KIND_KEYWORD),
	    new TokenType(26, "declare", TokenType.KIND_KEYWORD),
	    new TokenType(27, "function", TokenType.KIND_KEYWORD),
	    new TokenType(28, "return()", TokenType.KIND_KEYWORD),
	    new TokenType(29, "default", TokenType.KIND_KEYWORD),
	    new TokenType(30, "$HTTP_COOKIE_VARS", TokenType.KIND_KEYWORD),
	    new TokenType(31, "static", TokenType.KIND_KEYWORD),
	    new TokenType(32, "do", TokenType.KIND_KEYWORD),
	    new TokenType(33, "$HTTP_GET_VARS", TokenType.KIND_KEYWORD),
	    new TokenType(34, "switch", TokenType.KIND_KEYWORD),
	    new TokenType(35, "die()", TokenType.KIND_KEYWORD),
	    new TokenType(36, "$HTTP_POST_VARS", TokenType.KIND_KEYWORD),
	    new TokenType(37, "stdClass", TokenType.KIND_KEYWORD),
	    new TokenType(38, "echo()", TokenType.KIND_KEYWORD),
	    new TokenType(39, "$HTTP_POST_FILES", TokenType.KIND_KEYWORD),
	    new TokenType(40, "$this", TokenType.KIND_KEYWORD),
	    new TokenType(41, "else", TokenType.KIND_KEYWORD),
	    new TokenType(42, "$HTTP_ENV_VARS", TokenType.KIND_KEYWORD),
	    new TokenType(43, "TRUE", TokenType.KIND_KEYWORD),
	    new TokenType(44, "elseif", TokenType.KIND_KEYWORD),
	    new TokenType(45, "$HTTP_SERVER_VARS", TokenType.KIND_KEYWORD),
	    new TokenType(46, "var", TokenType.KIND_KEYWORD),
	    new TokenType(47, "empty()", TokenType.KIND_KEYWORD),
	    new TokenType(48, "if", TokenType.KIND_KEYWORD),
	    new TokenType(49, "xor", TokenType.KIND_KEYWORD),
	    new TokenType(50, "enddeclare", TokenType.KIND_KEYWORD),
	    new TokenType(51, "include()", TokenType.KIND_KEYWORD),
	    new TokenType(52, "virtual()", TokenType.KIND_KEYWORD),
	    new TokenType(53, "endfor", TokenType.KIND_KEYWORD),
	    new TokenType(54, "include_once", TokenType.KIND_KEYWORD),
	    new TokenType(55, "while", TokenType.KIND_KEYWORD),
	    new TokenType(56, "endforeach", TokenType.KIND_KEYWORD),
	    new TokenType(57, "global", TokenType.KIND_KEYWORD),
	    new TokenType(58, "__FILE__", TokenType.KIND_KEYWORD),
	    new TokenType(59, "endif", TokenType.KIND_KEYWORD),
	    new TokenType(60, "list()", TokenType.KIND_KEYWORD),
	    new TokenType(61, "__LINE__", TokenType.KIND_KEYWORD),
	    new TokenType(62, "endswitch", TokenType.KIND_KEYWORD),
	    new TokenType(63, "new", TokenType.KIND_KEYWORD),
	    new TokenType(64, "__sleep", TokenType.KIND_KEYWORD),
	    new TokenType(65, "endwhile", TokenType.KIND_KEYWORD),
	    new TokenType(66, "not", TokenType.KIND_KEYWORD),
	    new TokenType(67, "__wakeup", TokenType.KIND_KEYWORD),
	    new TokenType(68, "E_ALL", TokenType.KIND_KEYWORD),
	    new TokenType(69, "NULL", TokenType.KIND_KEYWORD),
	    new TokenType(70, "extends", TokenType.KIND_KEYWORD),
	    new TokenType(100, ";", TokenType.KIND_OTHER),
	    new TokenType(101, "==", TokenType.KIND_OPERATOR),
	    new TokenType(102, "+", TokenType.KIND_OPERATOR),
	    new TokenType(103, "-", TokenType.KIND_OPERATOR),
	    new TokenType(104, "/", TokenType.KIND_OPERATOR),
	    new TokenType(105, "*", TokenType.KIND_OPERATOR),
	    new TokenType(106, ",", TokenType.KIND_OPERATOR),
	    new TokenType(107, ">=", TokenType.KIND_OPERATOR),
	    new TokenType(108, "<=", TokenType.KIND_OPERATOR),
	    new TokenType(109, "=", TokenType.KIND_OPERATOR),
	    new TokenType(110, "!", TokenType.KIND_OPERATOR),
	    new TokenType(111, "\"", TokenType.KIND_OTHER),
	    new TokenType(112, "&", TokenType.KIND_OPERATOR),
	    new TokenType(113, "{", TokenType.KIND_OTHER),
	    new TokenType(114, "}", TokenType.KIND_OTHER),
	    new TokenType(115, "(", TokenType.KIND_OTHER),
	    new TokenType(116, ")", TokenType.KIND_OTHER),
	    new TokenType(117, "[", TokenType.KIND_OTHER),
	    new TokenType(118, "]", TokenType.KIND_OTHER),
	    new TokenType(119, "|", TokenType.KIND_OPERATOR),
	    new TokenType(120, "\\", TokenType.KIND_OTHER),
	    new TokenType(121, ".", TokenType.KIND_OPERATOR),
	    new TokenType(122, ">", TokenType.KIND_OPERATOR),
	    new TokenType(123, "<", TokenType.KIND_OPERATOR),
	    new TokenType(124, ":", TokenType.KIND_OTHER),
	    new TokenType(125, "?", TokenType.KIND_OTHER),
	    new TokenType(126, "===", TokenType.KIND_OPERATOR),
	    new TokenType(126, "HtmL", TokenType.KIND_OTHER) };

    private int comment_count;

    /**
     * Defaultconstructor : erzeugt einen neuen PHPScanner
     */
    public PHPScanner() {
	comment_count = 0;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     * 
     * @param in
     *            the java.io.Inputstream to read input from.
     */
    public PHPScanner(java.io.InputStream in) {
	this(new java.io.InputStreamReader(in));
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     * 
     * @param in
     *            the java.io.Reader to read input from.
     */
    public PHPScanner(java.io.Reader in) {
	this.zzReader = in;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.dotplot.tokenizer.service.ITokenizer#getSourceType()
     */
    public ISourceType getStreamType() {
	return PHPType.type;
    }

    public TokenType[] getTokenTypes() {
	return tokenTypes;
    }

    /**
     * Enters a new lexical state
     * 
     * @param newState
     *            the new lexical state
     */
    public final void yybegin(int newState) {
	zzLexicalState = newState;
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     * 
     * @param pos
     *            the position of the character to fetch. A value from 0 to
     *            yylength()-1.
     * 
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
	return zzBuffer[zzStartRead + pos];
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
	zzAtEOF = true; /* indicate end of file */
	zzEndRead = zzStartRead; /* invalidate buffer */

	if (zzReader != null) {
	    zzReader.close();
	}
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
	return zzMarkedPos - zzStartRead;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     * 
     * @return the next token
     * 
     * @throws java.io.IOException
     *             if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
	int zzInput;
	int zzAction;

	// cached fields:
	int zzCurrentPosL;
	int zzMarkedPosL;
	int zzEndReadL = zzEndRead;
	char[] zzBufferL = zzBuffer;
	char[] zzCMapL = ZZ_CMAP;

	int[] zzTransL = ZZ_TRANS;
	int[] zzRowMapL = ZZ_ROWMAP;
	int[] zzAttrL = ZZ_ATTRIBUTE;

	while (true) {
	    zzMarkedPosL = zzMarkedPos;

	    boolean zzR = false;
	    for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
		switch (zzBufferL[zzCurrentPosL]) {
		case '\u000B':
		case '\u000C':
		case '\u0085':
		case '\u2028':
		case '\u2029':
		    yyline++;
		    zzR = false;
		    break;
		case '\r':
		    yyline++;
		    zzR = true;
		    break;
		case '\n':
		    if (zzR) {
			zzR = false;
		    } else {
			yyline++;
		    }
		    break;
		default:
		    zzR = false;
		}
	    }

	    if (zzR) {
		// peek one character ahead if it is \n (if we have counted one
		// line too much)
		boolean zzPeek;
		if (zzMarkedPosL < zzEndReadL) {
		    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
		} else if (zzAtEOF) {
		    zzPeek = false;
		} else {
		    boolean eof = zzRefill();
		    zzMarkedPosL = zzMarkedPos;
		    zzBufferL = zzBuffer;
		    if (eof) {
			zzPeek = false;
		    } else {
			zzPeek = zzBufferL[zzMarkedPosL] == '\n';
		    }
		}
		if (zzPeek) {
		    yyline--;
		}
	    }
	    zzAction = -1;

	    zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

	    zzState = zzLexicalState;

	    zzForAction: {
		while (true) {

		    if (zzCurrentPosL < zzEndReadL) {
			zzInput = zzBufferL[zzCurrentPosL++];
		    } else if (zzAtEOF) {
			zzInput = YYEOF;
			break zzForAction;
		    } else {
			// store back cached positions
			zzCurrentPos = zzCurrentPosL;
			zzMarkedPos = zzMarkedPosL;
			boolean eof = zzRefill();
			// get translated positions and possibly new buffer
			zzCurrentPosL = zzCurrentPos;
			zzMarkedPosL = zzMarkedPos;
			zzBufferL = zzBuffer;
			zzEndReadL = zzEndRead;
			if (eof) {
			    zzInput = YYEOF;
			    break zzForAction;
			} else {
			    zzInput = zzBufferL[zzCurrentPosL++];
			}
		    }
		    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
		    if (zzNext == -1) {
			break zzForAction;
		    }
		    zzState = zzNext;

		    int zzAttributes = zzAttrL[zzState];
		    if ((zzAttributes & 1) == 1) {
			zzAction = zzState;
			zzMarkedPosL = zzCurrentPosL;
			if ((zzAttributes & 8) == 8) {
			    break zzForAction;
			}
		    }

		}
	    }

	    // store back cached position
	    zzMarkedPos = zzMarkedPosL;

	    switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
	    case 5: {
		yybegin(PHP);
		return (new EOLToken(yyline));
	    }
	    case 112:
		break;
	    case 19: {
		return (new Token(yytext(), 113, yyline));
	    }
	    case 113:
		break;
	    case 73: {
		return (new KeyWordToken(yytext(), 57, yyline));
	    }
	    case 114:
		break;
	    case 77: {
		return (new KeyWordToken(yytext(), 53, yyline));
	    }
	    case 115:
		break;
	    case 89: {
		return (new KeyWordToken(yytext(), 61, yyline));
	    }
	    case 116:
		break;
	    case 72: {
		return (new KeyWordToken(yytext(), 28, yyline));
	    }
	    case 117:
		break;
	    case 36: {
		return (new KeyWordToken(yytext(), 6, yyline));
	    }
	    case 118:
		break;
	    case 43: {
		yybegin(YYINITIAL);
		return (new Token(yytext(), 200, yyline));
	    }
	    case 119:
		break;
	    case 84: {
		return (new KeyWordToken(yytext(), 24, yyline));
	    }
	    case 120:
		break;
	    case 61: {
		return (new KeyWordToken(yytext(), 20, yyline));
	    }
	    case 121:
		break;
	    case 50: {
		return (new KeyWordToken(yytext(), 49, yyline));
	    }
	    case 122:
		break;
	    case 40: {
		return (new Token(yytext(), 101, yyline));
	    }
	    case 123:
		break;
	    case 110: {
		return (new KeyWordToken(yytext(), 45, yyline));
	    }
	    case 124:
		break;
	    case 24: {
		return (new Token(yytext(), 118, yyline));
	    }
	    case 125:
		break;
	    case 55: {
		return (new KeyWordToken(yytext(), 41, yyline));
	    }
	    case 126:
		break;
	    case 51: {
		return (new Token(yytext(), 126, yyline));
	    }
	    case 127:
		break;
	    case 15: {
		return (new Token(yytext(), 122, yyline));
	    }
	    case 128:
		break;
	    case 33: {
		comment_count = comment_count - 1;
		if (comment_count == 0) {
		    yybegin(PHP);
		}
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 129:
		break;
	    case 45: {
		return (new KeyWordToken(yytext(), 66, yyline));
	    }
	    case 130:
		break;
	    case 102: {
		return (new KeyWordToken(yytext(), 16, yyline));
	    }
	    case 131:
		break;
	    case 68: {
		return (new KeyWordToken(yytext(), 12, yyline));
	    }
	    case 132:
		break;
	    case 103: {
		return (new KeyWordToken(yytext(), 2, yyline));
	    }
	    case 133:
		break;
	    case 88: {
		return (new KeyWordToken(yytext(), 70, yyline));
	    }
	    case 134:
		break;
	    case 94: {
		return (new KeyWordToken(yytext(), 37, yyline));
	    }
	    case 135:
		break;
	    case 30: {
		return (new Token(yytext(), Token.TYPE_NUMBER, yyline));
	    }
	    case 136:
		break;
	    case 107: {
		return (new KeyWordToken(yytext(), 33, yyline));
	    }
	    case 137:
		break;
	    case 14: {
		return (new Token(yytext(), 106, yyline));
	    }
	    case 138:
		break;
	    case 20: {
		return (new Token(yytext(), 114, yyline));
	    }
	    case 139:
		break;
	    case 90: {
		return (new KeyWordToken(yytext(), 58, yyline));
	    }
	    case 140:
		break;
	    case 17: {
		return (new Token(yytext(), 110, yyline));
	    }
	    case 141:
		break;
	    case 104: {
		return (new KeyWordToken(yytext(), 54, yyline));
	    }
	    case 142:
		break;
	    case 99: {
		return (new KeyWordToken(yytext(), 62, yyline));
	    }
	    case 143:
		break;
	    case 2: {
		return (new EOLToken(yyline));
	    }
	    case 144:
		break;
	    case 96: {
		return (new KeyWordToken(yytext(), 7, yyline));
	    }
	    case 145:
		break;
	    case 79: {
		return (new KeyWordToken(yytext(), 29, yyline));
	    }
	    case 146:
		break;
	    case 105: {
		return (new KeyWordToken(yytext(), 25, yyline));
	    }
	    case 147:
		break;
	    case 63: {
		return (new KeyWordToken(yytext(), 3, yyline));
	    }
	    case 148:
		break;
	    case 48: {
		return (new KeyWordToken(yytext(), 21, yyline));
	    }
	    case 149:
		break;
	    case 3: { /* do nothing */
	    }
	    case 150:
		break;
	    case 12: {
		return (new Token(yytext(), 102, yyline));
	    }
	    case 151:
		break;
	    case 25: {
		return (new Token(yytext(), 119, yyline));
	    }
	    case 152:
		break;
	    case 49: {
		return (new KeyWordToken(yytext(), 46, yyline));
	    }
	    case 153:
		break;
	    case 106: {
		return (new KeyWordToken(yytext(), 42, yyline));
	    }
	    case 154:
		break;
	    case 21: {
		return (new Token(yytext(), 115, yyline));
	    }
	    case 155:
		break;
	    case 100: {
		return (new KeyWordToken(yytext(), 50, yyline));
	    }
	    case 156:
		break;
	    case 16: {
		return (new Token(yytext(), 123, yyline));
	    }
	    case 157:
		break;
	    case 91: {
		return (new KeyWordToken(yytext(), 67, yyline));
	    }
	    case 158:
		break;
	    case 32: {
		comment_count = comment_count + 1;
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 159:
		break;
	    case 97: {
		return (new KeyWordToken(yytext(), 17, yyline));
	    }
	    case 160:
		break;
	    case 46: {
		return (new KeyWordToken(yytext(), 63, yyline));
	    }
	    case 161:
		break;
	    case 58: {
		return (new KeyWordToken(yytext(), 13, yyline));
	    }
	    case 162:
		break;
	    case 56: {
		return (new KeyWordToken(yytext(), 38, yyline));
	    }
	    case 163:
		break;
	    case 34: {
		yybegin(LINE_COMMENT);
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 164:
		break;
	    case 75: {
		return (new KeyWordToken(yytext(), 34, yyline));
	    }
	    case 165:
		break;
	    case 41: {
		return (new Token(yytext(), 107, yyline));
	    }
	    case 166:
		break;
	    case 111: {
		return (new KeyWordToken(yytext(), 30, yyline));
	    }
	    case 167:
		break;
	    case 13: {
		return (new Token(yytext(), 103, yyline));
	    }
	    case 168:
		break;
	    case 66: {
		return (new KeyWordToken(yytext(), 59, yyline));
	    }
	    case 169:
		break;
	    case 8: {
		return (new Token(yytext(), 111, yyline));
	    }
	    case 170:
		break;
	    case 70: {
		return (new KeyWordToken(yytext(), 55, yyline));
	    }
	    case 171:
		break;
	    case 85: {
		return (new KeyWordToken(yytext(), 51, yyline));
	    }
	    case 172:
		break;
	    case 31: {
		yybegin(PHP);
		return (new Token(yytext(), 200, yyline));
	    }
	    case 173:
		break;
	    case 76: {
		return (new KeyWordToken(yytext(), 8, yyline));
	    }
	    case 174:
		break;
	    case 81: {
		return (new KeyWordToken(yytext(), 4, yyline));
	    }
	    case 175:
		break;
	    case 80: {
		return (new KeyWordToken(yytext(), 26, yyline));
	    }
	    case 176:
		break;
	    case 86: {
		return (new KeyWordToken(yytext(), 22, yyline));
	    }
	    case 177:
		break;
	    case 67: {
		return (new KeyWordToken(yytext(), 47, yyline));
	    }
	    case 178:
		break;
	    case 59: {
		return (new KeyWordToken(yytext(), 43, yyline));
	    }
	    case 179:
		break;
	    case 22: {
		return (new Token(yytext(), 116, yyline));
	    }
	    case 180:
		break;
	    case 28: {
		return (new Token(yytext(), 124, yyline));
	    }
	    case 181:
		break;
	    case 60: {
		return (new KeyWordToken(yytext(), 68, yyline));
	    }
	    case 182:
		break;
	    case 1: {
		return (new Token(yytext(), 200, yyline));
	    }
	    case 183:
		break;
	    case 26: {
		return (new Token(yytext(), 120, yyline));
	    }
	    case 184:
		break;
	    case 69: {
		return (new KeyWordToken(yytext(), 18, yyline));
	    }
	    case 185:
		break;
	    case 83: {
		return (new KeyWordToken(yytext(), 64, yyline));
	    }
	    case 186:
		break;
	    case 98: {
		return (new KeyWordToken(yytext(), 14, yyline));
	    }
	    case 187:
		break;
	    case 35: {
		yybegin(COMMENT);
		comment_count = comment_count + 1;
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 188:
		break;
	    case 57: {
		return (new KeyWordToken(yytext(), 10, yyline));
	    }
	    case 189:
		break;
	    case 44: {
		return (new KeyWordToken(yytext(), 0, yyline));
	    }
	    case 190:
		break;
	    case 109: {
		return (new KeyWordToken(yytext(), 39, yyline));
	    }
	    case 191:
		break;
	    case 9: {
		return (new Token(yytext(), Token.TYPE_IDENT, yyline));
	    }
	    case 192:
		break;
	    case 42: {
		return (new Token(yytext(), 108, yyline));
	    }
	    case 193:
		break;
	    case 47: {
		return (new KeyWordToken(yytext(), 35, yyline));
	    }
	    case 194:
		break;
	    case 74: {
		return (new KeyWordToken(yytext(), 31, yyline));
	    }
	    case 195:
		break;
	    case 6: {
		return (new Token(yytext(), 104, yyline));
	    }
	    case 196:
		break;
	    case 18: {
		return (new Token(yytext(), 112, yyline));
	    }
	    case 197:
		break;
	    case 101: {
		return (new KeyWordToken(yytext(), 56, yyline));
	    }
	    case 198:
		break;
	    case 87: {
		return (new KeyWordToken(yytext(), 52, yyline));
	    }
	    case 199:
		break;
	    case 65: {
		return (new KeyWordToken(yytext(), 19, yyline));
	    }
	    case 200:
		break;
	    case 52: {
		return (new KeyWordToken(yytext(), 60, yyline));
	    }
	    case 201:
		break;
	    case 62: {
		return (new KeyWordToken(yytext(), 9, yyline));
	    }
	    case 202:
		break;
	    case 92: {
		return (new KeyWordToken(yytext(), 27, yyline));
	    }
	    case 203:
		break;
	    case 38: {
		return (new KeyWordToken(yytext(), 5, yyline));
	    }
	    case 204:
		break;
	    case 93: {
		return (new KeyWordToken(yytext(), 23, yyline));
	    }
	    case 205:
		break;
	    case 39: {
		return (new KeyWordToken(yytext(), 48, yyline));
	    }
	    case 206:
		break;
	    case 10: {
		return (new Token(yytext(), 100, yyline));
	    }
	    case 207:
		break;
	    case 78: {
		return (new KeyWordToken(yytext(), 44, yyline));
	    }
	    case 208:
		break;
	    case 23: {
		return (new Token(yytext(), 117, yyline));
	    }
	    case 209:
		break;
	    case 64: {
		return (new KeyWordToken(yytext(), 40, yyline));
	    }
	    case 210:
		break;
	    case 29: {
		return (new Token(yytext(), 125, yyline));
	    }
	    case 211:
		break;
	    case 54: {
		return (new KeyWordToken(yytext(), 69, yyline));
	    }
	    case 212:
		break;
	    case 27: {
		return (new Token(yytext(), 121, yyline));
	    }
	    case 213:
		break;
	    case 95: {
		return (new KeyWordToken(yytext(), 65, yyline));
	    }
	    case 214:
		break;
	    case 53: {
		return (new KeyWordToken(yytext(), 15, yyline));
	    }
	    case 215:
		break;
	    case 4: {
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 216:
		break;
	    case 71: {
		return (new KeyWordToken(yytext(), 11, yyline));
	    }
	    case 217:
		break;
	    case 82: {
		return (new KeyWordToken(yytext(), 1, yyline));
	    }
	    case 218:
		break;
	    case 108: {
		return (new KeyWordToken(yytext(), 36, yyline));
	    }
	    case 219:
		break;
	    case 11: {
		return (new Token(yytext(), 109, yyline));
	    }
	    case 220:
		break;
	    case 7: {
		return (new Token(yytext(), 105, yyline));
	    }
	    case 221:
		break;
	    case 37: {
		return (new KeyWordToken(yytext(), 32, yyline));
	    }
	    case 222:
		break;
	    default:
		if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
		    zzAtEOF = true;
		    return null;
		} else {
		    zzScanError(ZZ_NO_MATCH);
		}
	    }
	}
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     * 
     * @param number
     *            the number of characters to be read again. This number must
     *            not be greater than yylength()!
     */
    public void yypushback(int number) {
	if (number > yylength()) {
	    zzScanError(ZZ_PUSHBACK_2BIG);
	}

	zzMarkedPos -= number;
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     * <p/>
     * All internal variables are reset, the old input stream <b>cannot</b> be
     * reused (internal buffer is discarded and lost). Lexical state is set to
     * <tt>ZZ_INITIAL</tt>.
     * 
     * @param reader
     *            the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
	zzReader = reader;
	zzAtBOL = true;
	zzAtEOF = false;
	zzEndRead = zzStartRead = 0;
	zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
	yyline = yychar = yycolumn = 0;
	zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
	return zzLexicalState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
	return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Refills the input buffer.
     * 
     * @return <code>false</code>, iff there was new input.
     * 
     * @throws java.io.IOException
     *             if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

	/* first: make room (if you can) */
	if (zzStartRead > 0) {
	    System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
		    - zzStartRead);

	    /* translate stored positions */
	    zzEndRead -= zzStartRead;
	    zzCurrentPos -= zzStartRead;
	    zzMarkedPos -= zzStartRead;
	    zzPushbackPos -= zzStartRead;
	    zzStartRead = 0;
	}

	/* is the buffer big enough? */
	if (zzCurrentPos >= zzBuffer.length) {
	    /* if not: blow it up */
	    char newBuffer[] = new char[zzCurrentPos * 2];
	    System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
	    zzBuffer = newBuffer;
	}

	/* finally: fill the buffer with new input */
	int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
		- zzEndRead);

	if (numRead < 0) {
	    return true;
	} else {
	    zzEndRead += numRead;
	    return false;
	}
    }

    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     * 
     * @param errorCode
     *            the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
	String message;
	try {
	    message = ZZ_ERROR_MSG[errorCode];
	} catch (ArrayIndexOutOfBoundsException e) {
	    message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
	}

	throw new Error(message);
    }
}
