/* The following code was generated by JFlex 1.4 on 27.06.04 15:31 */
package org.dotplot.tokenizer.service;

import org.dotplot.core.ISourceType;
import org.dotplot.tokenizer.EOLToken;
import org.dotplot.tokenizer.KeyWordToken;
import org.dotplot.tokenizer.Token;
import org.dotplot.tokenizer.TokenType;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4 on 27.06.04 15:31 from the specification file
 * <tt>C:/Programme/eclipse/workspace/org.dotplot/src/org/dotplot/tokenizer/scanner/flexfiles/C++Scanner.flex</tt>
 * .
 */
public class CPlusPlusScanner extends BaseScanner {
    /**
     * This character denotes the end of file.
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer.
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states.
     */
    public static final int LINE_COMMENT = 2;

    public static final int YYINITIAL = 0;

    public static final int COMMENT = 1;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED = "\1\2\7\0\1\2\1\3\1\1\2\4\1\5\22\0\1\3\1\52"
	    + "\1\10\3\0\1\53\1\0\1\56\1\57\1\7\1\45\1\47\1\46"
	    + "\1\64\1\6\1\67\11\71\1\65\1\43\1\51\1\44\1\50\1\66"
	    + "\1\0\32\70\1\60\1\63\1\61\1\0\1\14\1\0\1\11\1\24"
	    + "\1\31\1\13\1\15\1\34\1\37\1\32\1\25\1\70\1\30\1\27"
	    + "\1\20\1\12\1\23\1\33\1\16\1\26\1\17\1\22\1\21\1\41"
	    + "\1\40\1\36\1\35\1\42\1\54\1\62\1\55\7\0\1\4\u1fa2\0"
	    + "\2\4\udfd6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"
	    + "\25\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
	    + "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
	    + "\1\27\1\30\1\31\1\32\1\33\1\34\1\1\1\3"
	    + "\1\2\2\1\2\35\1\36\1\37\1\0\7\7\1\40"
	    + "\17\7\1\41\5\7\1\42\22\7\1\43\1\44\1\45"
	    + "\1\46\1\47\1\1\1\50\1\51\2\7\1\52\1\53"
	    + "\24\7\1\54\10\7\1\55\17\7\1\56\2\7\1\57"
	    + "\7\7\1\60\6\7\1\61\1\62\16\7\1\63\1\64"
	    + "\4\7\1\65\7\7\1\66\1\67\5\7\1\70\7\7"
	    + "\1\71\2\7\1\72\20\7\1\73\3\7\1\74\1\75"
	    + "\1\7\1\76\3\7\1\77\2\7\1\100\1\101\4\7"
	    + "\1\102\1\103\1\7\1\104\1\105\3\7\1\106\1\7"
	    + "\1\107\2\7\1\110\2\7\1\111\1\7\1\112\1\113"
	    + "\1\7\1\114\1\7\1\115\1\116\1\7\1\117\1\120"
	    + "\1\121\1\122\1\123\5\7\1\124\1\7\1\125\1\126"
	    + "\1\127\4\7\1\130\2\7\1\131\1\132\4\7\1\133"
	    + "\3\7\1\134\3\7\1\135\6\7\1\136\1\137\1\7"
	    + "\1\140\2\7\1\141\1\7\1\142\1\143\1\144\1\145"
	    + "\1\7\1\146\1\7\1\147\1\7\1\150\1\151\4\7"
	    + "\1\152\3\7\1\153\1\7\1\154\1\7\1\155\4\7" + "\1\156";

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\72\0\164\0\256\0\256\0\350\0\u0122\0\u015c"
	    + "\0\256\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"
	    + "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"
	    + "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\256"
	    + "\0\u0692\0\256\0\256\0\256\0\u06cc\0\u0706\0\256\0\256"
	    + "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"
	    + "\0\256\0\256\0\256\0\u0740\0\u077a\0\u07b4\0\u077a\0\u07ee"
	    + "\0\u0828\0\256\0\u0862\0\256\0\256\0\u089c\0\u08d6\0\u0910"
	    + "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"
	    + "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"
	    + "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"
	    + "\0\u0eba\0\u0ef4\0\u0f2e\0\u027e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016"
	    + "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6"
	    + "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\256\0\256"
	    + "\0\256\0\u077a\0\u077a\0\u089c\0\u137c\0\u027e\0\u13b6\0\u13f0"
	    + "\0\u027e\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"
	    + "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"
	    + "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u027e\0\u18ec"
	    + "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u027e"
	    + "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"
	    + "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u027e"
	    + "\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8"
	    + "\0\u1ff2\0\u202c\0\u027e\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"
	    + "\0\u2188\0\u027e\0\u027e\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa"
	    + "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"
	    + "\0\u24b4\0\u027e\0\u027e\0\u24ee\0\u2528\0\u2562\0\u259c\0\u027e"
	    + "\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u027e"
	    + "\0\u027e\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u027e\0\u288e"
	    + "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u027e\0\u2a24"
	    + "\0\u2a5e\0\u027e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba"
	    + "\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a"
	    + "\0\u2dc4\0\u2dfe\0\u027e\0\u2e38\0\u2e72\0\u2eac\0\u027e\0\u027e"
	    + "\0\u2ee6\0\u027e\0\u2f20\0\u2f5a\0\u2f94\0\u027e\0\u2fce\0\u3008"
	    + "\0\u027e\0\u027e\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u027e\0\u312a"
	    + "\0\u3164\0\u027e\0\u027e\0\u319e\0\u31d8\0\u3212\0\u027e\0\u324c"
	    + "\0\u027e\0\u3286\0\u32c0\0\u027e\0\u32fa\0\u3334\0\u027e\0\u336e"
	    + "\0\u027e\0\u027e\0\u33a8\0\u027e\0\u33e2\0\u027e\0\u027e\0\u341c"
	    + "\0\u3456\0\u027e\0\u027e\0\u027e\0\u027e\0\u3490\0\u34ca\0\u3504"
	    + "\0\u353e\0\u3578\0\u027e\0\u35b2\0\u027e\0\u027e\0\u027e\0\u35ec"
	    + "\0\u3626\0\u3660\0\u369a\0\u027e\0\u36d4\0\u370e\0\u027e\0\u027e"
	    + "\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u027e\0\u3830\0\u386a\0\u38a4"
	    + "\0\u027e\0\u38de\0\u3918\0\u3952\0\u027e\0\u398c\0\u39c6\0\u3a00"
	    + "\0\u3a3a\0\u3a74\0\u3aae\0\u027e\0\u027e\0\u3ae8\0\u027e\0\u3b22"
	    + "\0\u3b5c\0\u027e\0\u3b96\0\u027e\0\u027e\0\u027e\0\u027e\0\u3bd0"
	    + "\0\u027e\0\u3c0a\0\u027e\0\u3c44\0\u027e\0\u027e\0\u3c7e\0\u3cb8"
	    + "\0\u3cf2\0\u3d2c\0\u027e\0\u3d66\0\u3da0\0\u3dda\0\u027e\0\u3e14"
	    + "\0\u027e\0\u3e4e\0\u027e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u027e";

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\2\6\1\5\1\7\1\10\1\11\1\12"
	    + "\1\13\1\14\1\15\1\16\1\17\1\16\1\20\1\21"
	    + "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\16"
	    + "\1\31\1\16\1\32\1\33\1\16\1\34\1\35\1\36"
	    + "\1\37\1\16\1\40\1\41\1\42\1\43\1\44\1\45"
	    + "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"
	    + "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\16"
	    + "\1\64\1\65\1\5\1\66\1\6\1\67\1\7\1\70"
	    + "\1\71\63\65\1\72\1\66\1\6\1\65\1\73\64\65"
	    + "\74\0\2\6\67\0\1\5\76\0\1\74\1\75\62\0"
	    + "\1\76\1\0\70\76\11\0\1\16\1\77\4\16\1\100"
	    + "\1\16\1\101\21\16\25\0\2\16\11\0\1\102\3\16"
	    + "\1\103\5\16\1\104\17\16\25\0\2\16\11\0\4\16"
	    + "\1\105\5\16\1\106\11\16\1\107\5\16\25\0\2\16"
	    + "\11\0\32\16\25\0\2\16\11\0\1\16\1\110\14\16"
	    + "\1\111\6\16\1\112\4\16\25\0\2\16\11\0\11\16"
	    + "\1\113\2\16\1\114\4\16\1\115\5\16\1\116\2\16"
	    + "\25\0\2\16\11\0\10\16\1\117\21\16\25\0\2\16"
	    + "\11\0\1\16\1\120\4\16\1\121\23\16\25\0\2\16"
	    + "\11\0\4\16\1\122\10\16\1\123\3\16\1\124\2\16"
	    + "\1\125\5\16\25\0\2\16\11\0\15\16\1\126\4\16"
	    + "\1\127\7\16\25\0\2\16\11\0\12\16\1\130\1\16"
	    + "\1\131\1\132\14\16\25\0\2\16\11\0\1\16\1\133"
	    + "\21\16\1\134\6\16\25\0\2\16\11\0\4\16\1\135"
	    + "\25\16\25\0\2\16\11\0\12\16\1\136\17\16\25\0"
	    + "\2\16\11\0\1\137\11\16\1\140\3\16\1\141\2\16"
	    + "\1\142\10\16\25\0\2\16\11\0\10\16\1\143\4\16"
	    + "\1\144\14\16\25\0\2\16\11\0\1\145\11\16\1\146"
	    + "\2\16\1\147\1\150\13\16\25\0\2\16\11\0\12\16"
	    + "\1\151\17\16\25\0\2\16\11\0\12\16\1\152\17\16"
	    + "\25\0\2\16\11\0\20\16\1\153\1\154\10\16\25\0"
	    + "\2\16\11\0\12\16\1\155\1\16\1\156\15\16\25\0"
	    + "\2\16\44\0\1\157\71\0\1\160\71\0\1\161\114\0"
	    + "\1\64\1\0\1\64\1\65\1\0\1\65\1\0\1\65"
	    + "\1\0\65\65\1\0\1\66\1\6\1\65\1\0\65\65"
	    + "\1\0\1\65\1\0\1\65\1\0\1\65\1\162\63\65"
	    + "\1\0\1\65\1\0\1\65\1\0\1\163\63\65\1\0"
	    + "\1\72\70\0\1\76\1\0\6\76\1\164\61\76\11\0"
	    + "\2\16\1\165\27\16\25\0\2\16\11\0\7\16\1\166"
	    + "\22\16\25\0\2\16\11\0\11\16\1\167\20\16\25\0"
	    + "\2\16\11\0\7\16\1\170\22\16\25\0\2\16\11\0"
	    + "\27\16\1\171\2\16\25\0\2\16\11\0\11\16\1\172"
	    + "\20\16\25\0\2\16\11\0\16\16\1\173\4\16\1\174"
	    + "\6\16\25\0\2\16\11\0\10\16\1\175\21\16\25\0"
	    + "\2\16\11\0\1\16\1\176\30\16\25\0\2\16\11\0"
	    + "\10\16\1\177\21\16\25\0\2\16\11\0\6\16\1\200"
	    + "\23\16\25\0\2\16\11\0\11\16\1\201\10\16\1\202"
	    + "\7\16\25\0\2\16\11\0\1\203\14\16\1\204\14\16"
	    + "\25\0\2\16\11\0\26\16\1\205\2\16\1\206\25\0"
	    + "\2\16\11\0\12\16\1\207\17\16\25\0\2\16\11\0"
	    + "\14\16\1\210\15\16\25\0\2\16\11\0\11\16\1\211"
	    + "\20\16\25\0\2\16\11\0\6\16\1\212\5\16\1\213"
	    + "\15\16\25\0\2\16\11\0\14\16\1\214\15\16\25\0"
	    + "\2\16\11\0\7\16\1\215\22\16\25\0\2\16\11\0"
	    + "\10\16\1\216\13\16\1\217\5\16\25\0\2\16\11\0"
	    + "\14\16\1\220\1\221\14\16\25\0\2\16\11\0\22\16"
	    + "\1\222\7\16\25\0\2\16\11\0\3\16\1\223\26\16"
	    + "\25\0\2\16\11\0\4\16\1\224\25\16\25\0\2\16"
	    + "\11\0\12\16\1\225\17\16\25\0\2\16\11\0\11\16"
	    + "\1\226\20\16\25\0\2\16\11\0\4\16\1\227\25\16"
	    + "\25\0\2\16\11\0\11\16\1\230\4\16\1\231\13\16"
	    + "\25\0\2\16\11\0\11\16\1\232\2\16\1\233\11\16"
	    + "\1\234\3\16\25\0\2\16\11\0\1\16\1\235\30\16"
	    + "\25\0\2\16\11\0\6\16\1\236\2\16\1\237\20\16"
	    + "\25\0\2\16\11\0\1\16\1\240\5\16\1\241\22\16"
	    + "\25\0\2\16\11\0\1\242\31\16\25\0\2\16\11\0"
	    + "\1\243\31\16\25\0\2\16\11\0\13\16\1\244\16\16"
	    + "\25\0\2\16\11\0\12\16\1\245\1\16\1\246\15\16"
	    + "\25\0\2\16\11\0\16\16\1\247\13\16\25\0\2\16"
	    + "\11\0\15\16\1\250\14\16\25\0\2\16\11\0\14\16"
	    + "\1\251\15\16\25\0\2\16\11\0\12\16\1\252\17\16"
	    + "\25\0\2\16\11\0\15\16\1\253\14\16\25\0\2\16"
	    + "\11\0\11\16\1\254\20\16\25\0\2\16\11\0\21\16"
	    + "\1\255\10\16\25\0\2\16\11\0\14\16\1\256\15\16"
	    + "\25\0\2\16\11\0\14\16\1\257\1\16\1\260\13\16"
	    + "\25\0\2\16\11\0\15\16\1\261\14\16\25\0\2\16"
	    + "\11\0\3\16\1\262\26\16\25\0\2\16\11\0\12\16"
	    + "\1\263\17\16\25\0\2\16\11\0\4\16\1\264\25\16"
	    + "\25\0\2\16\11\0\3\16\1\265\26\16\25\0\2\16"
	    + "\11\0\4\16\1\266\25\16\25\0\2\16\11\0\1\267"
	    + "\31\16\25\0\2\16\11\0\13\16\1\270\16\16\25\0"
	    + "\2\16\11\0\1\271\31\16\25\0\2\16\11\0\7\16"
	    + "\1\272\22\16\25\0\2\16\11\0\4\16\1\273\25\16"
	    + "\25\0\2\16\11\0\4\16\1\274\25\16\25\0\2\16"
	    + "\11\0\12\16\1\275\3\16\1\276\13\16\25\0\2\16"
	    + "\11\0\11\16\1\277\20\16\25\0\2\16\11\0\10\16"
	    + "\1\300\21\16\25\0\2\16\11\0\1\16\1\301\30\16"
	    + "\25\0\2\16\11\0\4\16\1\302\25\16\25\0\2\16"
	    + "\11\0\15\16\1\303\14\16\25\0\2\16\11\0\11\16"
	    + "\1\304\20\16\25\0\2\16\11\0\1\305\31\16\25\0"
	    + "\2\16\11\0\14\16\1\306\15\16\25\0\2\16\11\0"
	    + "\12\16\1\307\17\16\25\0\2\16\11\0\1\16\1\310"
	    + "\30\16\25\0\2\16\11\0\22\16\1\311\7\16\25\0"
	    + "\2\16\11\0\4\16\1\312\25\16\25\0\2\16\11\0"
	    + "\6\16\1\313\23\16\25\0\2\16\11\0\12\16\1\314"
	    + "\17\16\25\0\2\16\11\0\4\16\1\315\25\16\25\0"
	    + "\2\16\11\0\4\16\1\316\25\16\25\0\2\16\11\0"
	    + "\15\16\1\317\14\16\25\0\2\16\11\0\16\16\1\320"
	    + "\13\16\25\0\2\16\11\0\1\321\11\16\1\322\17\16"
	    + "\25\0\2\16\11\0\1\323\31\16\25\0\2\16\11\0"
	    + "\14\16\1\324\15\16\25\0\2\16\11\0\10\16\1\325"
	    + "\21\16\25\0\2\16\11\0\1\16\1\326\30\16\25\0"
	    + "\2\16\11\0\14\16\1\327\15\16\25\0\2\16\11\0"
	    + "\26\16\1\330\3\16\25\0\2\16\11\0\4\16\1\331"
	    + "\25\16\25\0\2\16\11\0\20\16\1\332\11\16\25\0"
	    + "\2\16\11\0\6\16\1\333\2\16\1\334\20\16\25\0"
	    + "\2\16\11\0\22\16\1\335\7\16\25\0\2\16\11\0"
	    + "\6\16\1\336\23\16\25\0\2\16\11\0\15\16\1\337"
	    + "\14\16\25\0\2\16\11\0\16\16\1\340\13\16\25\0"
	    + "\2\16\11\0\11\16\1\341\20\16\25\0\2\16\11\0"
	    + "\30\16\1\342\1\16\25\0\2\16\11\0\6\16\1\343"
	    + "\23\16\25\0\2\16\11\0\4\16\1\344\25\16\25\0"
	    + "\2\16\11\0\1\345\31\16\25\0\2\16\11\0\3\16"
	    + "\1\346\26\16\25\0\2\16\11\0\12\16\1\347\17\16"
	    + "\25\0\2\16\11\0\1\350\31\16\25\0\2\16\11\0"
	    + "\16\16\1\351\13\16\25\0\2\16\11\0\2\16\1\352"
	    + "\27\16\25\0\2\16\11\0\1\353\31\16\25\0\2\16"
	    + "\11\0\11\16\1\354\20\16\25\0\2\16\11\0\4\16"
	    + "\1\355\25\16\25\0\2\16\11\0\6\16\1\356\23\16"
	    + "\25\0\2\16\11\0\4\16\1\357\25\16\25\0\2\16"
	    + "\11\0\11\16\1\360\20\16\25\0\2\16\11\0\10\16"
	    + "\1\361\21\16\25\0\2\16\11\0\16\16\1\362\13\16"
	    + "\25\0\2\16\11\0\7\16\1\363\22\16\25\0\2\16"
	    + "\11\0\15\16\1\364\14\16\25\0\2\16\11\0\15\16"
	    + "\1\365\14\16\25\0\2\16\11\0\14\16\1\366\15\16"
	    + "\25\0\2\16\11\0\14\16\1\367\15\16\25\0\2\16"
	    + "\11\0\20\16\1\370\11\16\25\0\2\16\11\0\4\16"
	    + "\1\371\25\16\25\0\2\16\11\0\12\16\1\372\17\16"
	    + "\25\0\2\16\11\0\11\16\1\373\20\16\25\0\2\16"
	    + "\11\0\20\16\1\374\11\16\25\0\2\16\11\0\13\16"
	    + "\1\375\16\16\25\0\2\16\11\0\26\16\1\376\3\16"
	    + "\25\0\2\16\11\0\1\16\1\377\30\16\25\0\2\16"
	    + "\11\0\26\16\1\u0100\3\16\25\0\2\16\11\0\16\16"
	    + "\1\u0101\13\16\25\0\2\16\11\0\27\16\1\u0102\2\16"
	    + "\25\0\2\16\11\0\1\16\1\u0103\1\u0104\11\16\1\u0105"
	    + "\15\16\25\0\2\16\11\0\5\16\1\u0106\24\16\25\0"
	    + "\2\16\11\0\1\u0107\31\16\25\0\2\16\11\0\1\16"
	    + "\1\u0108\30\16\25\0\2\16\11\0\15\16\1\u0109\14\16"
	    + "\25\0\2\16\11\0\17\16\1\u010a\12\16\25\0\2\16"
	    + "\11\0\1\16\1\u010b\30\16\25\0\2\16\11\0\15\16"
	    + "\1\u010c\14\16\25\0\2\16\11\0\11\16\1\u010d\20\16"
	    + "\25\0\2\16\11\0\6\16\1\u010e\23\16\25\0\2\16"
	    + "\11\0\21\16\1\u010f\10\16\25\0\2\16\11\0\11\16"
	    + "\1\u0110\20\16\25\0\2\16\11\0\14\16\1\u0111\15\16"
	    + "\25\0\2\16\11\0\16\16\1\u0112\13\16\25\0\2\16"
	    + "\11\0\6\16\1\u0113\23\16\25\0\2\16\11\0\14\16"
	    + "\1\u0114\15\16\25\0\2\16\11\0\4\16\1\u0115\25\16"
	    + "\25\0\2\16\11\0\1\u0116\31\16\25\0\2\16\11\0"
	    + "\4\16\1\u0117\25\16\25\0\2\16\11\0\1\16\1\u0118"
	    + "\30\16\25\0\2\16\11\0\11\16\1\u0119\20\16\25\0"
	    + "\2\16\11\0\4\16\1\u011a\25\16\25\0\2\16\11\0"
	    + "\15\16\1\u011b\14\16\25\0\2\16\11\0\4\16\1\u011c"
	    + "\25\16\25\0\2\16\11\0\11\16\1\u011d\20\16\25\0"
	    + "\2\16\11\0\10\16\1\u011e\21\16\25\0\2\16\11\0"
	    + "\5\16\1\u011f\24\16\25\0\2\16\11\0\22\16\1\u0120"
	    + "\7\16\25\0\2\16\11\0\5\16\1\u0121\24\16\25\0"
	    + "\2\16\11\0\4\16\1\u0122\25\16\25\0\2\16\11\0"
	    + "\16\16\1\u0123\13\16\25\0\2\16\11\0\4\16\1\u0124"
	    + "\25\16\25\0\2\16\11\0\14\16\1\u0125\15\16\25\0"
	    + "\2\16\11\0\1\16\1\u0126\30\16\25\0\2\16\11\0"
	    + "\11\16\1\u0127\20\16\25\0\2\16\11\0\20\16\1\u0128"
	    + "\11\16\25\0\2\16\11\0\20\16\1\u0129\11\16\25\0"
	    + "\2\16\11\0\11\16\1\u012a\20\16\25\0\2\16\11\0"
	    + "\2\16\1\u012b\27\16\25\0\2\16\11\0\23\16\1\u012c"
	    + "\6\16\25\0\2\16\11\0\21\16\1\u012d\10\16\25\0"
	    + "\2\16\11\0\16\16\1\u012e\13\16\25\0\2\16\11\0"
	    + "\1\16\1\u012f\30\16\25\0\2\16\11\0\1\u0130\31\16"
	    + "\25\0\2\16\11\0\1\u0131\31\16\25\0\2\16\11\0"
	    + "\4\16\1\u0132\25\16\25\0\2\16\11\0\2\16\1\u0133"
	    + "\27\16\25\0\2\16\11\0\11\16\1\u0134\20\16\25\0"
	    + "\2\16\11\0\2\16\1\u0135\27\16\25\0\2\16\11\0"
	    + "\4\16\1\u0136\25\16\25\0\2\16\11\0\1\16\1\u0137"
	    + "\30\16\25\0\2\16\11\0\4\16\1\u0138\25\16\25\0"
	    + "\2\16\11\0\11\16\1\u0139\20\16\25\0\2\16\11\0"
	    + "\3\16\1\u013a\26\16\25\0\2\16\11\0\1\16\1\u013b"
	    + "\30\16\25\0\2\16\11\0\20\16\1\u013c\11\16\25\0"
	    + "\2\16\11\0\20\16\1\u013d\11\16\25\0\2\16\11\0"
	    + "\11\16\1\u013e\20\16\25\0\2\16\11\0\2\16\1\u013f"
	    + "\27\16\25\0\2\16\11\0\5\16\1\u0140\24\16\25\0"
	    + "\2\16\11\0\3\16\1\u0141\26\16\25\0\2\16\11\0"
	    + "\14\16\1\u0142\15\16\25\0\2\16\11\0\1\u0143\31\16"
	    + "\25\0\2\16\11\0\1\u0144\31\16\25\0\2\16\11\0"
	    + "\11\16\1\u0145\20\16\25\0\2\16\11\0\20\16\1\u0146"
	    + "\11\16\25\0\2\16\11\0\14\16\1\u0147\15\16\25\0"
	    + "\2\16\11\0\3\16\1\u0148\26\16\25\0\2\16\11\0"
	    + "\4\16\1\u0149\25\16\25\0\2\16\11\0\4\16\1\u014a"
	    + "\25\16\25\0\2\16\11\0\11\16\1\u014b\20\16\25\0"
	    + "\2\16\11\0\7\16\1\u014c\22\16\25\0\2\16\11\0"
	    + "\23\16\1\u014d\6\16\25\0\2\16\11\0\12\16\1\u014e"
	    + "\17\16\25\0\2\16\11\0\15\16\1\u014f\14\16\25\0"
	    + "\2\16\11\0\4\16\1\u0150\25\16\25\0\2\16\11\0"
	    + "\20\16\1\u0151\11\16\25\0\2\16\11\0\10\16\1\u0152"
	    + "\21\16\25\0\2\16\11\0\11\16\1\u0153\20\16\25\0"
	    + "\2\16\11\0\4\16\1\u0154\25\16\25\0\2\16\11\0"
	    + "\11\16\1\u0155\20\16\25\0\2\16\11\0\16\16\1\u0156"
	    + "\13\16\25\0\2\16\11\0\16\16\1\u0157\13\16\25\0"
	    + "\2\16\11\0\20\16\1\u0158\11\16\25\0\2\16\11\0"
	    + "\3\16\1\u0159\26\16\25\0\2\16\11\0\11\16\1\u015a"
	    + "\20\16\25\0\2\16\11\0\20\16\1\u015b\11\16\25\0"
	    + "\2\16\11\0\2\16\1\u015c\27\16\25\0\2\16\11\0"
	    + "\4\16\1\u015d\25\16\25\0\2\16\11\0\4\16\1\u015e"
	    + "\25\16\25\0\2\16\11\0\15\16\1\u015f\14\16\25\0"
	    + "\2\16\11\0\22\16\1\u0160\7\16\25\0\2\16\11\0"
	    + "\15\16\1\u0161\14\16\25\0\2\16\11\0\1\u0162\31\16"
	    + "\25\0\2\16\11\0\4\16\1\u0163\25\16\25\0\2\16"
	    + "\11\0\4\16\1\u0164\25\16\25\0\2\16\11\0\4\16"
	    + "\1\u0165\25\16\25\0\2\16\11\0\4\16\1\u0166\25\16"
	    + "\25\0\2\16\11\0\20\16\1\u0167\11\16\25\0\2\16"
	    + "\11\0\1\u0168\31\16\25\0\2\16\11\0\15\16\1\u0169"
	    + "\14\16\25\0\2\16\11\0\6\16\1\u016a\23\16\25\0"
	    + "\2\16\11\0\2\16\1\u016b\27\16\25\0\2\16\11\0"
	    + "\1\u016c\31\16\25\0\2\16\11\0\6\16\1\u016d\23\16"
	    + "\25\0\2\16\11\0\4\16\1\u016e\25\16\25\0\2\16"
	    + "\11\0\11\16\1\u016f\20\16\25\0\2\16\11\0\6\16"
	    + "\1\u0170\23\16\25\0\2\16\11\0\11\16\1\u0171\20\16"
	    + "\25\0\2\16\11\0\11\16\1\u0172\20\16\25\0\2\16"
	    + "\11\0\11\16\1\u0173\20\16\25\0\2\16\11\0\3\16"
	    + "\1\u0174\26\16\25\0\2\16\11\0\20\16\1\u0175\11\16"
	    + "\25\0\2\16\11\0\1\u0176\31\16\25\0\2\16\11\0"
	    + "\6\16\1\u0177\23\16\25\0\2\16\11\0\11\16\1\u0178"
	    + "\20\16\25\0\2\16";

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
	    "Unkown internal scanner error", "Error: could not match input",
	    "Error: pushback value was too large" };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\2\11\3\1\1\11\26\1\1\11\1\1\3\11"
	    + "\2\1\15\11\6\1\1\11\1\1\2\11\1\0\60\1" + "\3\11\u0107\1";

    private static int[] zzUnpackAction() {
	int[] result = new int[376];
	int offset = 0;
	offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do {
		result[j++] = value;
	    } while (--count > 0);
	}
	return j;
    }

    private static int[] zzUnpackAttribute() {
	int[] result = new int[376];
	int offset = 0;
	offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do {
		result[j++] = value;
	    } while (--count > 0);
	}
	return j;
    }

    /**
     * Unpacks the compressed character translation table.
     * 
     * @param packed
     *            the packed character translation table
     * 
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
	char[] map = new char[0x10000];
	int i = 0; /* index in packed string */
	int j = 0; /* index in unpacked array */
	while (i < 144) {
	    int count = packed.charAt(i++);
	    char value = packed.charAt(i++);
	    do {
		map[j++] = value;
	    } while (--count > 0);
	}
	return map;
    }

    private static int[] zzUnpackRowMap() {
	int[] result = new int[376];
	int offset = 0;
	offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int high = packed.charAt(i++) << 16;
	    result[j++] = high | packed.charAt(i++);
	}
	return j;
    }

    private static int[] zzUnpackTrans() {
	int[] result = new int[16240];
	int offset = 0;
	offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    value--;
	    do {
		result[j++] = value;
	    } while (--count > 0);
	}
	return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /* user code: */

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    protected static TokenType[] tokenTypes = {
	    new TokenType(Token.TYPE_STRING, "comment", TokenType.KIND_OTHER),
	    new TokenType(Token.TYPE_IDENT, "identifier", TokenType.KIND_OTHER),
	    new TokenType(Token.TYPE_NUMBER, "number", TokenType.KIND_OTHER),
	    new TokenType(0, "and", TokenType.KIND_KEYWORD),
	    new TokenType(1, "and_eq", TokenType.KIND_KEYWORD),
	    new TokenType(2, "asm", TokenType.KIND_KEYWORD),
	    new TokenType(3, "auto", TokenType.KIND_KEYWORD),
	    new TokenType(4, "bitand", TokenType.KIND_KEYWORD),
	    new TokenType(5, "bitor", TokenType.KIND_KEYWORD),
	    new TokenType(6, "bool", TokenType.KIND_KEYWORD),
	    new TokenType(7, "break", TokenType.KIND_KEYWORD),
	    new TokenType(8, "case", TokenType.KIND_KEYWORD),
	    new TokenType(9, "catch", TokenType.KIND_KEYWORD),
	    new TokenType(10, "char", TokenType.KIND_KEYWORD),
	    new TokenType(11, "class", TokenType.KIND_KEYWORD),
	    new TokenType(12, "compl", TokenType.KIND_KEYWORD),
	    new TokenType(13, "const", TokenType.KIND_KEYWORD),
	    new TokenType(14, "const_cast", TokenType.KIND_KEYWORD),
	    new TokenType(15, "continue", TokenType.KIND_KEYWORD),
	    new TokenType(16, "default", TokenType.KIND_KEYWORD),
	    new TokenType(17, "delete", TokenType.KIND_KEYWORD),
	    new TokenType(18, "do", TokenType.KIND_KEYWORD),
	    new TokenType(19, "double", TokenType.KIND_KEYWORD),
	    new TokenType(20, "dynamic_cast", TokenType.KIND_KEYWORD),
	    new TokenType(21, "else", TokenType.KIND_KEYWORD),
	    new TokenType(22, "enum", TokenType.KIND_KEYWORD),
	    new TokenType(23, "explicit", TokenType.KIND_KEYWORD),
	    new TokenType(24, "export", TokenType.KIND_KEYWORD),
	    new TokenType(25, "extern", TokenType.KIND_KEYWORD),
	    new TokenType(26, "false", TokenType.KIND_KEYWORD),
	    new TokenType(27, "float", TokenType.KIND_KEYWORD),
	    new TokenType(28, "for", TokenType.KIND_KEYWORD),
	    new TokenType(29, "friend", TokenType.KIND_KEYWORD),
	    new TokenType(30, "goto", TokenType.KIND_KEYWORD),
	    new TokenType(31, "if", TokenType.KIND_KEYWORD),
	    new TokenType(32, "inline", TokenType.KIND_KEYWORD),
	    new TokenType(33, "int", TokenType.KIND_KEYWORD),
	    new TokenType(34, "long", TokenType.KIND_KEYWORD),
	    new TokenType(35, "mutable", TokenType.KIND_KEYWORD),
	    new TokenType(36, "namespace", TokenType.KIND_KEYWORD),
	    new TokenType(37, "new", TokenType.KIND_KEYWORD),
	    new TokenType(38, "not", TokenType.KIND_KEYWORD),
	    new TokenType(39, "not_eq", TokenType.KIND_KEYWORD),
	    new TokenType(40, "operator", TokenType.KIND_KEYWORD),
	    new TokenType(41, "or", TokenType.KIND_KEYWORD),
	    new TokenType(42, "or_eq", TokenType.KIND_KEYWORD),
	    new TokenType(43, "private", TokenType.KIND_KEYWORD),
	    new TokenType(44, "protected", TokenType.KIND_KEYWORD),
	    new TokenType(45, "public", TokenType.KIND_KEYWORD),
	    new TokenType(46, "register", TokenType.KIND_KEYWORD),
	    new TokenType(47, "reinterpret_cast", TokenType.KIND_KEYWORD),
	    new TokenType(48, "return", TokenType.KIND_KEYWORD),
	    new TokenType(49, "short", TokenType.KIND_KEYWORD),
	    new TokenType(50, "signed", TokenType.KIND_KEYWORD),
	    new TokenType(51, "sizeof", TokenType.KIND_KEYWORD),
	    new TokenType(52, "static", TokenType.KIND_KEYWORD),
	    new TokenType(53, "static_cast", TokenType.KIND_KEYWORD),
	    new TokenType(54, "struct", TokenType.KIND_KEYWORD),
	    new TokenType(55, "switch", TokenType.KIND_KEYWORD),
	    new TokenType(56, "template", TokenType.KIND_KEYWORD),
	    new TokenType(57, "this", TokenType.KIND_KEYWORD),
	    new TokenType(58, "throw", TokenType.KIND_KEYWORD),
	    new TokenType(59, "true", TokenType.KIND_KEYWORD),
	    new TokenType(60, "try", TokenType.KIND_KEYWORD),
	    new TokenType(61, "typedef", TokenType.KIND_KEYWORD),
	    new TokenType(62, "typeid", TokenType.KIND_KEYWORD),
	    new TokenType(63, "typename", TokenType.KIND_KEYWORD),
	    new TokenType(64, "union", TokenType.KIND_KEYWORD),
	    new TokenType(65, "unsigned", TokenType.KIND_KEYWORD),
	    new TokenType(66, "using", TokenType.KIND_KEYWORD),
	    new TokenType(67, "virtual", TokenType.KIND_KEYWORD),
	    new TokenType(68, "void", TokenType.KIND_KEYWORD),
	    new TokenType(69, "volatile", TokenType.KIND_KEYWORD),
	    new TokenType(70, "wchar_t", TokenType.KIND_KEYWORD),
	    new TokenType(71, "while", TokenType.KIND_KEYWORD),
	    new TokenType(72, "xor", TokenType.KIND_KEYWORD),
	    new TokenType(73, "xor_eq", TokenType.KIND_KEYWORD),
	    new TokenType(100, ";", TokenType.KIND_OTHER),
	    new TokenType(101, "==", TokenType.KIND_OPERATOR),
	    new TokenType(102, "+", TokenType.KIND_OPERATOR),
	    new TokenType(103, "-", TokenType.KIND_OPERATOR),
	    new TokenType(104, "/", TokenType.KIND_OPERATOR),
	    new TokenType(105, "*", TokenType.KIND_OPERATOR),
	    new TokenType(106, ",", TokenType.KIND_OPERATOR),
	    new TokenType(107, ">=", TokenType.KIND_OPERATOR),
	    new TokenType(108, "<=", TokenType.KIND_OPERATOR),
	    new TokenType(109, "=", TokenType.KIND_OPERATOR),
	    new TokenType(110, "!", TokenType.KIND_OPERATOR),
	    new TokenType(111, "\"", TokenType.KIND_OTHER),
	    new TokenType(112, "&", TokenType.KIND_OPERATOR),
	    new TokenType(113, "{", TokenType.KIND_OTHER),
	    new TokenType(114, "}", TokenType.KIND_OTHER),
	    new TokenType(115, "(", TokenType.KIND_OTHER),
	    new TokenType(116, ")", TokenType.KIND_OTHER),
	    new TokenType(117, "[", TokenType.KIND_OTHER),
	    new TokenType(118, "]", TokenType.KIND_OTHER),
	    new TokenType(119, "|", TokenType.KIND_OPERATOR),
	    new TokenType(120, "\\", TokenType.KIND_OTHER),
	    new TokenType(121, ".", TokenType.KIND_OPERATOR),
	    new TokenType(122, ">", TokenType.KIND_OPERATOR),
	    new TokenType(123, "<", TokenType.KIND_OPERATOR),
	    new TokenType(124, ":", TokenType.KIND_OTHER),
	    new TokenType(125, "?", TokenType.KIND_OTHER) };

    private int comment_count;

    /**
     * Defaultconstructor : erzeugt einen neuen CPlusPlusScanner
     */
    public CPlusPlusScanner() {
	comment_count = 0;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     * 
     * @param in
     *            the java.io.Inputstream to read input from.
     */
    public CPlusPlusScanner(java.io.InputStream in) {
	this(new java.io.InputStreamReader(in));
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     * 
     * @param in
     *            the java.io.Reader to read input from.
     */
    public CPlusPlusScanner(java.io.Reader in) {
	this.zzReader = in;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.dotplot.tokenizer.service.ITokenizer#getSourceType()
     */
    public ISourceType getStreamType() {
	return CPlusPlusType.type;
    }

    public TokenType[] getTokenTypes() {
	return tokenTypes;
    }

    /**
     * Enters a new lexical state
     * 
     * @param newState
     *            the new lexical state
     */
    public final void yybegin(int newState) {
	zzLexicalState = newState;
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     * 
     * @param pos
     *            the position of the character to fetch. A value from 0 to
     *            yylength()-1.
     * 
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
	return zzBuffer[zzStartRead + pos];
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
	zzAtEOF = true; /* indicate end of file */
	zzEndRead = zzStartRead; /* invalidate buffer */

	if (zzReader != null) {
	    zzReader.close();
	}
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
	return zzMarkedPos - zzStartRead;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     * 
     * @return the next token
     * 
     * @throws java.io.IOException
     *             if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
	int zzInput;
	int zzAction;

	// cached fields:
	int zzCurrentPosL;
	int zzMarkedPosL;
	int zzEndReadL = zzEndRead;
	char[] zzBufferL = zzBuffer;
	char[] zzCMapL = ZZ_CMAP;

	int[] zzTransL = ZZ_TRANS;
	int[] zzRowMapL = ZZ_ROWMAP;
	int[] zzAttrL = ZZ_ATTRIBUTE;

	while (true) {
	    zzMarkedPosL = zzMarkedPos;

	    boolean zzR = false;
	    for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
		switch (zzBufferL[zzCurrentPosL]) {
		case '\u000B':
		case '\u000C':
		case '\u0085':
		case '\u2028':
		case '\u2029':
		    yyline++;
		    zzR = false;
		    break;
		case '\r':
		    yyline++;
		    zzR = true;
		    break;
		case '\n':
		    if (zzR) {
			zzR = false;
		    } else {
			yyline++;
		    }
		    break;
		default:
		    zzR = false;
		}
	    }

	    if (zzR) {
		// peek one character ahead if it is \n (if we have counted one
		// line too much)
		boolean zzPeek;
		if (zzMarkedPosL < zzEndReadL) {
		    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
		} else if (zzAtEOF) {
		    zzPeek = false;
		} else {
		    boolean eof = zzRefill();
		    zzMarkedPosL = zzMarkedPos;
		    zzBufferL = zzBuffer;
		    if (eof) {
			zzPeek = false;
		    } else {
			zzPeek = zzBufferL[zzMarkedPosL] == '\n';
		    }
		}
		if (zzPeek) {
		    yyline--;
		}
	    }
	    zzAction = -1;

	    zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

	    zzState = zzLexicalState;

	    zzForAction: {
		while (true) {

		    if (zzCurrentPosL < zzEndReadL) {
			zzInput = zzBufferL[zzCurrentPosL++];
		    } else if (zzAtEOF) {
			zzInput = YYEOF;
			break zzForAction;
		    } else {
			// store back cached positions
			zzCurrentPos = zzCurrentPosL;
			zzMarkedPos = zzMarkedPosL;
			boolean eof = zzRefill();
			// get translated positions and possibly new buffer
			zzCurrentPosL = zzCurrentPos;
			zzMarkedPosL = zzMarkedPos;
			zzBufferL = zzBuffer;
			zzEndReadL = zzEndRead;
			if (eof) {
			    zzInput = YYEOF;
			    break zzForAction;
			} else {
			    zzInput = zzBufferL[zzCurrentPosL++];
			}
		    }
		    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
		    if (zzNext == -1) {
			break zzForAction;
		    }
		    zzState = zzNext;

		    int zzAttributes = zzAttrL[zzState];
		    if ((zzAttributes & 1) == 1) {
			zzAction = zzState;
			zzMarkedPosL = zzCurrentPosL;
			if ((zzAttributes & 8) == 8) {
			    break zzForAction;
			}
		    }

		}
	    }

	    // store back cached position
	    zzMarkedPos = zzMarkedPosL;

	    switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
	    case 17: {
		return (new Token(yytext(), 113, yyline));
	    }
	    case 111:
		break;
	    case 52: {
		return (new KeyWordToken(yytext(), 57, yyline));
	    }
	    case 112:
		break;
	    case 108: {
		return (new KeyWordToken(yytext(), 53, yyline));
	    }
	    case 113:
		break;
	    case 93: {
		return (new KeyWordToken(yytext(), 61, yyline));
	    }
	    case 114:
		break;
	    case 53: {
		return (new KeyWordToken(yytext(), 6, yyline));
	    }
	    case 115:
		break;
	    case 46: {
		return (new KeyWordToken(yytext(), 28, yyline));
	    }
	    case 116:
		break;
	    case 78: {
		return (new KeyWordToken(yytext(), 24, yyline));
	    }
	    case 117:
		break;
	    case 109: {
		return (new KeyWordToken(yytext(), 20, yyline));
	    }
	    case 118:
		break;
	    case 59: {
		return (new KeyWordToken(yytext(), 49, yyline));
	    }
	    case 119:
		break;
	    case 35: {
		return (new Token(yytext(), 101, yyline));
	    }
	    case 120:
		break;
	    case 88: {
		return (new KeyWordToken(yytext(), 45, yyline));
	    }
	    case 121:
		break;
	    case 22: {
		return (new Token(yytext(), 118, yyline));
	    }
	    case 122:
		break;
	    case 33: {
		return (new KeyWordToken(yytext(), 41, yyline));
	    }
	    case 123:
		break;
	    case 13: {
		return (new Token(yytext(), 122, yyline));
	    }
	    case 124:
		break;
	    case 61: {
		return (new KeyWordToken(yytext(), 66, yyline));
	    }
	    case 125:
		break;
	    case 91: {
		return (new KeyWordToken(yytext(), 16, yyline));
	    }
	    case 126:
		break;
	    case 68: {
		return (new KeyWordToken(yytext(), 12, yyline));
	    }
	    case 127:
		break;
	    case 41: {
		return (new KeyWordToken(yytext(), 2, yyline));
	    }
	    case 128:
		break;
	    case 95: {
		return (new KeyWordToken(yytext(), 70, yyline));
	    }
	    case 129:
		break;
	    case 42: {
		return (new KeyWordToken(yytext(), 37, yyline));
	    }
	    case 130:
		break;
	    case 28: {
		return (new Token(yytext(), Token.TYPE_NUMBER, yyline));
	    }
	    case 131:
		break;
	    case 12: {
		return (new Token(yytext(), 106, yyline));
	    }
	    case 132:
		break;
	    case 45: {
		return (new KeyWordToken(yytext(), 33, yyline));
	    }
	    case 133:
		break;
	    case 18: {
		return (new Token(yytext(), 114, yyline));
	    }
	    case 134:
		break;
	    case 62: {
		return (new KeyWordToken(yytext(), 58, yyline));
	    }
	    case 135:
		break;
	    case 15: {
		return (new Token(yytext(), 110, yyline));
	    }
	    case 136:
		break;
	    case 80: {
		return (new KeyWordToken(yytext(), 54, yyline));
	    }
	    case 137:
		break;
	    case 84: {
		return (new KeyWordToken(yytext(), 62, yyline));
	    }
	    case 138:
		break;
	    case 2: {
		return (new EOLToken(yyline));
	    }
	    case 139:
		break;
	    case 89: {
		return (new KeyWordToken(yytext(), 29, yyline));
	    }
	    case 140:
		break;
	    case 65: {
		return (new KeyWordToken(yytext(), 7, yyline));
	    }
	    case 141:
		break;
	    case 77: {
		return (new KeyWordToken(yytext(), 25, yyline));
	    }
	    case 142:
		break;
	    case 48: {
		return (new KeyWordToken(yytext(), 3, yyline));
	    }
	    case 143:
		break;
	    case 50: {
		return (new KeyWordToken(yytext(), 21, yyline));
	    }
	    case 144:
		break;
	    case 3: { /* do nothing */
	    }
	    case 145:
		break;
	    case 10: {
		return (new Token(yytext(), 102, yyline));
	    }
	    case 146:
		break;
	    case 102: {
		return (new KeyWordToken(yytext(), 46, yyline));
	    }
	    case 147:
		break;
	    case 23: {
		return (new Token(yytext(), 119, yyline));
	    }
	    case 148:
		break;
	    case 19: {
		return (new Token(yytext(), 115, yyline));
	    }
	    case 149:
		break;
	    case 63: {
		return (new KeyWordToken(yytext(), 42, yyline));
	    }
	    case 150:
		break;
	    case 81: {
		return (new KeyWordToken(yytext(), 50, yyline));
	    }
	    case 151:
		break;
	    case 14: {
		return (new Token(yytext(), 123, yyline));
	    }
	    case 152:
		break;
	    case 96: {
		return (new KeyWordToken(yytext(), 67, yyline));
	    }
	    case 153:
		break;
	    case 38: {
		comment_count = comment_count + 1;
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 154:
		break;
	    case 75: {
		return (new KeyWordToken(yytext(), 17, yyline));
	    }
	    case 155:
		break;
	    case 100: {
		return (new KeyWordToken(yytext(), 63, yyline));
	    }
	    case 156:
		break;
	    case 67: {
		return (new KeyWordToken(yytext(), 13, yyline));
	    }
	    case 157:
		break;
	    case 72: {
		return (new KeyWordToken(yytext(), 71, yyline));
	    }
	    case 158:
		break;
	    case 29: {
		yybegin(YYINITIAL);
		return (new EOLToken(yyline));
	    }
	    case 159:
		break;
	    case 43: {
		return (new KeyWordToken(yytext(), 38, yyline));
	    }
	    case 160:
		break;
	    case 30: {
		yybegin(LINE_COMMENT);
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 161:
		break;
	    case 36: {
		return (new Token(yytext(), 107, yyline));
	    }
	    case 162:
		break;
	    case 54: {
		return (new KeyWordToken(yytext(), 34, yyline));
	    }
	    case 163:
		break;
	    case 11: {
		return (new Token(yytext(), 103, yyline));
	    }
	    case 164:
		break;
	    case 57: {
		return (new KeyWordToken(yytext(), 30, yyline));
	    }
	    case 165:
		break;
	    case 51: {
		return (new KeyWordToken(yytext(), 59, yyline));
	    }
	    case 166:
		break;
	    case 6: {
		return (new Token(yytext(), 111, yyline));
	    }
	    case 167:
		break;
	    case 83: {
		return (new KeyWordToken(yytext(), 55, yyline));
	    }
	    case 168:
		break;
	    case 82: {
		return (new KeyWordToken(yytext(), 51, yyline));
	    }
	    case 169:
		break;
	    case 55: {
		return (new KeyWordToken(yytext(), 8, yyline));
	    }
	    case 170:
		break;
	    case 85: {
		return (new KeyWordToken(yytext(), 4, yyline));
	    }
	    case 171:
		break;
	    case 70: {
		return (new KeyWordToken(yytext(), 26, yyline));
	    }
	    case 172:
		break;
	    case 49: {
		return (new KeyWordToken(yytext(), 22, yyline));
	    }
	    case 173:
		break;
	    case 110: {
		return (new KeyWordToken(yytext(), 47, yyline));
	    }
	    case 174:
		break;
	    case 94: {
		return (new KeyWordToken(yytext(), 43, yyline));
	    }
	    case 175:
		break;
	    case 20: {
		return (new Token(yytext(), 116, yyline));
	    }
	    case 176:
		break;
	    case 39: {
		comment_count = comment_count - 1;
		if (comment_count == 0) {
		    yybegin(YYINITIAL);
		}
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 177:
		break;
	    case 26: {
		return (new Token(yytext(), 124, yyline));
	    }
	    case 178:
		break;
	    case 58: {
		return (new KeyWordToken(yytext(), 68, yyline));
	    }
	    case 179:
		break;
	    case 24: {
		return (new Token(yytext(), 120, yyline));
	    }
	    case 180:
		break;
	    case 32: {
		return (new KeyWordToken(yytext(), 18, yyline));
	    }
	    case 181:
		break;
	    case 60: {
		return (new KeyWordToken(yytext(), 64, yyline));
	    }
	    case 182:
		break;
	    case 107: {
		return (new KeyWordToken(yytext(), 14, yyline));
	    }
	    case 183:
		break;
	    case 31: {
		yybegin(COMMENT);
		comment_count = comment_count + 1;
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 184:
		break;
	    case 47: {
		return (new KeyWordToken(yytext(), 72, yyline));
	    }
	    case 185:
		break;
	    case 56: {
		return (new KeyWordToken(yytext(), 10, yyline));
	    }
	    case 186:
		break;
	    case 40: {
		return (new KeyWordToken(yytext(), 0, yyline));
	    }
	    case 187:
		break;
	    case 74: {
		return (new KeyWordToken(yytext(), 39, yyline));
	    }
	    case 188:
		break;
	    case 7: {
		return (new Token(yytext(), Token.TYPE_IDENT, yyline));
	    }
	    case 189:
		break;
	    case 92: {
		return (new KeyWordToken(yytext(), 35, yyline));
	    }
	    case 190:
		break;
	    case 37: {
		return (new Token(yytext(), 108, yyline));
	    }
	    case 191:
		break;
	    case 4: {
		return (new Token(yytext(), 104, yyline));
	    }
	    case 192:
		break;
	    case 34: {
		return (new KeyWordToken(yytext(), 31, yyline));
	    }
	    case 193:
		break;
	    case 16: {
		return (new Token(yytext(), 112, yyline));
	    }
	    case 194:
		break;
	    case 99: {
		return (new KeyWordToken(yytext(), 56, yyline));
	    }
	    case 195:
		break;
	    case 79: {
		return (new KeyWordToken(yytext(), 52, yyline));
	    }
	    case 196:
		break;
	    case 76: {
		return (new KeyWordToken(yytext(), 19, yyline));
	    }
	    case 197:
		break;
	    case 44: {
		return (new KeyWordToken(yytext(), 60, yyline));
	    }
	    case 198:
		break;
	    case 66: {
		return (new KeyWordToken(yytext(), 9, yyline));
	    }
	    case 199:
		break;
	    case 64: {
		return (new KeyWordToken(yytext(), 5, yyline));
	    }
	    case 200:
		break;
	    case 71: {
		return (new KeyWordToken(yytext(), 27, yyline));
	    }
	    case 201:
		break;
	    case 97: {
		return (new KeyWordToken(yytext(), 23, yyline));
	    }
	    case 202:
		break;
	    case 87: {
		return (new KeyWordToken(yytext(), 48, yyline));
	    }
	    case 203:
		break;
	    case 8: {
		return (new Token(yytext(), 100, yyline));
	    }
	    case 204:
		break;
	    case 106: {
		return (new KeyWordToken(yytext(), 44, yyline));
	    }
	    case 205:
		break;
	    case 21: {
		return (new Token(yytext(), 117, yyline));
	    }
	    case 206:
		break;
	    case 101: {
		return (new KeyWordToken(yytext(), 40, yyline));
	    }
	    case 207:
		break;
	    case 27: {
		return (new Token(yytext(), 125, yyline));
	    }
	    case 208:
		break;
	    case 104: {
		return (new KeyWordToken(yytext(), 69, yyline));
	    }
	    case 209:
		break;
	    case 25: {
		return (new Token(yytext(), 121, yyline));
	    }
	    case 210:
		break;
	    case 98: {
		return (new KeyWordToken(yytext(), 65, yyline));
	    }
	    case 211:
		break;
	    case 103: {
		return (new KeyWordToken(yytext(), 15, yyline));
	    }
	    case 212:
		break;
	    case 90: {
		return (new KeyWordToken(yytext(), 73, yyline));
	    }
	    case 213:
		break;
	    case 1: {
		return (new Token(yytext(), Token.TYPE_STRING, yyline));
	    }
	    case 214:
		break;
	    case 69: {
		return (new KeyWordToken(yytext(), 11, yyline));
	    }
	    case 215:
		break;
	    case 73: {
		return (new KeyWordToken(yytext(), 1, yyline));
	    }
	    case 216:
		break;
	    case 105: {
		return (new KeyWordToken(yytext(), 36, yyline));
	    }
	    case 217:
		break;
	    case 9: {
		return (new Token(yytext(), 109, yyline));
	    }
	    case 218:
		break;
	    case 86: {
		return (new KeyWordToken(yytext(), 32, yyline));
	    }
	    case 219:
		break;
	    case 5: {
		return (new Token(yytext(), 105, yyline));
	    }
	    case 220:
		break;
	    default:
		if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
		    zzAtEOF = true;
		    return null;
		} else {
		    zzScanError(ZZ_NO_MATCH);
		}
	    }
	}
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     * 
     * @param number
     *            the number of characters to be read again. This number must
     *            not be greater than yylength()!
     */
    public void yypushback(int number) {
	if (number > yylength()) {
	    zzScanError(ZZ_PUSHBACK_2BIG);
	}

	zzMarkedPos -= number;
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     * <p/>
     * All internal variables are reset, the old input stream <b>cannot</b> be
     * reused (internal buffer is discarded and lost). Lexical state is set to
     * <tt>ZZ_INITIAL</tt>.
     * 
     * @param reader
     *            the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
	zzReader = reader;
	zzAtBOL = true;
	zzAtEOF = false;
	zzEndRead = zzStartRead = 0;
	zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
	yyline = yychar = yycolumn = 0;
	zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
	return zzLexicalState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
	return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Refills the input buffer.
     * 
     * @return <code>false</code>, iff there was new input.
     * 
     * @throws java.io.IOException
     *             if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

	/* first: make room (if you can) */
	if (zzStartRead > 0) {
	    System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
		    - zzStartRead);

	    /* translate stored positions */
	    zzEndRead -= zzStartRead;
	    zzCurrentPos -= zzStartRead;
	    zzMarkedPos -= zzStartRead;
	    zzPushbackPos -= zzStartRead;
	    zzStartRead = 0;
	}

	/* is the buffer big enough? */
	if (zzCurrentPos >= zzBuffer.length) {
	    /* if not: blow it up */
	    char newBuffer[] = new char[zzCurrentPos * 2];
	    System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
	    zzBuffer = newBuffer;
	}

	/* finally: fill the buffer with new input */
	int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
		- zzEndRead);

	if (numRead < 0) {
	    return true;
	} else {
	    zzEndRead += numRead;
	    return false;
	}
    }

    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     * 
     * @param errorCode
     *            the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
	String message;
	try {
	    message = ZZ_ERROR_MSG[errorCode];
	} catch (ArrayIndexOutOfBoundsException e) {
	    message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
	}

	throw new Error(message);
    }
}
