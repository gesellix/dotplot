/* The following code was generated by JFlex 1.4 on 27.06.04 15:31 */
package org.dotplot.tokenizer.service;

import org.dotplot.core.ISourceType;
import org.dotplot.tokenizer.EOLToken;
import org.dotplot.tokenizer.KeyWordToken;
import org.dotplot.tokenizer.Token;
import org.dotplot.tokenizer.TokenType;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4 on 27.06.04 15:31 from the specification file
 * 
 * <tt>C:/Programme/eclipse/workspace/org.dotplot/src/org/dotplot/tokenizer/scanner/flexfiles/JavaScanner.flex</tt>
 * .
 */
public class JavaScanner extends BaseScanner {
	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int LINE_COMMENT = 2;

	public static final int YYINITIAL = 0;

	public static final int COMMENT = 1;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\1\2\7\0\1\2\1\3\1\1\2\4\1\5\22\0\1\3\1\50"
			+ "\1\10\3\0\1\51\1\0\1\54\1\55\1\7\1\43\1\45\1\44"
			+ "\1\62\1\6\1\65\11\67\1\63\1\41\1\47\1\42\1\46\1\64"
			+ "\1\0\32\66\1\56\1\61\1\57\1\0\1\66\1\0\1\11\1\12"
			+ "\1\16\1\30\1\21\1\31\1\33\1\25\1\26\1\66\1\23\1\20"
			+ "\1\34\1\22\1\17\1\35\1\66\1\15\1\13\1\14\1\27\1\36"
			+ "\1\37\1\32\1\24\1\40\1\52\1\60\1\53\7\0\1\4\u1fa2\0"
			+ "\2\4\udfd6\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"
			+ "\21\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
			+ "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\1\27\1\30\1\31\1\32\1\33\1\34\1\1\1\3"
			+ "\1\2\2\1\2\35\1\36\1\37\1\0\26\7\1\40"
			+ "\1\7\1\41\12\7\1\42\1\43\1\44\1\45\1\46"
			+ "\1\1\13\7\1\47\14\7\1\50\1\7\1\51\3\7"
			+ "\1\52\15\7\1\53\10\7\1\54\1\7\1\55\4\7"
			+ "\1\56\1\57\1\60\12\7\1\61\5\7\1\62\2\7"
			+ "\1\63\4\7\1\64\1\65\2\7\1\66\1\7\1\67"
			+ "\1\70\1\7\1\71\10\7\1\72\1\73\5\7\1\74"
			+ "\2\7\1\75\2\7\1\76\1\7\1\77\1\100\2\7"
			+ "\1\101\2\7\1\102\1\7\1\103\5\7\1\104\2\7"
			+ "\1\105\4\7\1\106\3\7\1\107\1\110\1\111\1\7"
			+ "\1\112\1\7\1\113\1\114\2\7\1\115\4\7\1\116"
			+ "\1\7\1\117\1\7\1\120\1\7\1\121\1\7\1\122" + "\1\123\1\7\1\124";

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\70\0\160\0\250\0\250\0\340\0\u0118\0\u0150"
			+ "\0\250\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"
			+ "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"
			+ "\0\u04d0\0\u0508\0\u0540\0\250\0\u0578\0\250\0\250\0\250"
			+ "\0\u05b0\0\u05e8\0\250\0\250\0\250\0\250\0\250\0\250"
			+ "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\u0620"
			+ "\0\u0658\0\u0690\0\u0658\0\u06c8\0\u0700\0\250\0\u0738\0\250"
			+ "\0\250\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"
			+ "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"
			+ "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40"
			+ "\0\u0310\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"
			+ "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\250\0\250\0\250"
			+ "\0\u0658\0\u0658\0\u0770\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"
			+ "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u0310\0\u1180"
			+ "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"
			+ "\0\u1378\0\u13b0\0\u13e8\0\u0310\0\u1420\0\u1458\0\u1490\0\u14c8"
			+ "\0\u1500\0\u0310\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"
			+ "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u0310"
			+ "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"
			+ "\0\u0310\0\u19d0\0\u0310\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u0310"
			+ "\0\u0310\0\u0310\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"
			+ "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u0310\0\u1d18\0\u1d50\0\u1d88"
			+ "\0\u1dc0\0\u1df8\0\u0310\0\u1e30\0\u1e68\0\u0310\0\u1ea0\0\u1ed8"
			+ "\0\u1f10\0\u1f48\0\u0310\0\u0310\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"
			+ "\0\u0310\0\u0310\0\u2060\0\u0310\0\u2098\0\u20d0\0\u2108\0\u2140"
			+ "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u0310\0\u2258\0\u2290\0\u22c8"
			+ "\0\u2300\0\u2338\0\u2370\0\u0310\0\u23a8\0\u23e0\0\u0310\0\u2418"
			+ "\0\u2450\0\u0310\0\u2488\0\u0310\0\u0310\0\u24c0\0\u24f8\0\u0310"
			+ "\0\u2530\0\u2568\0\u0310\0\u25a0\0\u0310\0\u25d8\0\u2610\0\u2648"
			+ "\0\u2680\0\u26b8\0\u0310\0\u26f0\0\u2728\0\u0310\0\u2760\0\u2798"
			+ "\0\u27d0\0\u2808\0\u0310\0\u2840\0\u2878\0\u28b0\0\u0310\0\u0310"
			+ "\0\u0310\0\u28e8\0\u0310\0\u2920\0\u0310\0\u0310\0\u2958\0\u2990"
			+ "\0\u0310\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u0310\0\u2aa8\0\u0310"
			+ "\0\u2ae0\0\u0310\0\u2b18\0\u0310\0\u2b50\0\u0310\0\u0310\0\u2b88"
			+ "\0\u0310";

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\2\6\1\5\1\7\1\10\1\11\1\12"
			+ "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"
			+ "\1\23\1\24\3\21\1\25\1\21\1\26\1\27\1\21"
			+ "\1\30\1\21\1\31\1\32\1\33\1\21\1\34\1\35"
			+ "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"
			+ "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"
			+ "\1\56\1\57\1\60\1\21\1\60\1\61\1\5\1\62"
			+ "\1\6\1\63\1\7\1\64\1\65\61\61\1\66\1\62"
			+ "\1\6\1\61\1\67\62\61\72\0\2\6\65\0\1\5"
			+ "\74\0\1\70\1\71\60\0\1\72\1\0\66\72\11\0"
			+ "\1\21\1\73\26\21\25\0\2\21\11\0\4\21\1\74"
			+ "\1\21\1\75\4\21\1\76\14\21\25\0\2\21\11\0"
			+ "\3\21\1\77\7\21\1\100\1\101\1\21\1\102\7\21"
			+ "\1\103\1\21\25\0\2\21\11\0\4\21\1\104\7\21"
			+ "\1\105\13\21\25\0\2\21\11\0\10\21\1\106\17\21"
			+ "\25\0\2\21\11\0\1\107\5\21\1\110\1\111\4\21"
			+ "\1\112\13\21\25\0\2\21\11\0\30\21\25\0\2\21"
			+ "\11\0\6\21\1\113\21\21\25\0\2\21\11\0\7\21"
			+ "\1\114\11\21\1\115\6\21\25\0\2\21\11\0\1\116"
			+ "\7\21\1\117\17\21\25\0\2\21\11\0\11\21\1\120"
			+ "\6\21\1\121\2\21\1\122\4\21\25\0\2\21\11\0"
			+ "\6\21\1\123\1\21\1\124\17\21\25\0\2\21\11\0"
			+ "\6\21\1\125\1\126\5\21\1\127\12\21\25\0\2\21"
			+ "\11\0\6\21\1\130\21\21\25\0\2\21\11\0\1\131"
			+ "\3\21\1\132\11\21\1\133\11\21\25\0\2\21\11\0"
			+ "\6\21\1\134\21\21\25\0\2\21\11\0\14\21\1\135"
			+ "\13\21\25\0\2\21\42\0\1\136\67\0\1\137\67\0"
			+ "\1\140\112\0\1\60\1\0\1\60\1\61\1\0\1\61"
			+ "\1\0\1\61\1\0\63\61\1\0\1\62\1\6\1\61"
			+ "\1\0\63\61\1\0\1\61\1\0\1\61\1\0\1\61"
			+ "\1\141\61\61\1\0\1\61\1\0\1\61\1\0\1\142"
			+ "\61\61\1\0\1\66\66\0\1\72\1\0\6\72\1\143"
			+ "\57\72\11\0\2\21\1\144\25\21\25\0\2\21\11\0"
			+ "\10\21\1\145\17\21\25\0\2\21\11\0\6\21\1\146"
			+ "\21\21\25\0\2\21\11\0\3\21\1\147\24\21\25\0"
			+ "\2\21\11\0\1\150\3\21\1\151\23\21\25\0\2\21"
			+ "\11\0\11\21\1\152\16\21\25\0\2\21\11\0\6\21"
			+ "\1\153\21\21\25\0\2\21\11\0\24\21\1\154\3\21"
			+ "\25\0\2\21\11\0\15\21\1\155\12\21\25\0\2\21"
			+ "\11\0\1\156\12\21\1\157\14\21\25\0\2\21\11\0"
			+ "\4\21\1\160\10\21\1\161\12\21\25\0\2\21\11\0"
			+ "\3\21\1\162\24\21\25\0\2\21\11\0\2\21\1\163"
			+ "\1\164\24\21\25\0\2\21\11\0\11\21\1\165\16\21"
			+ "\25\0\2\21\11\0\1\166\27\21\25\0\2\21\11\0"
			+ "\1\167\27\21\25\0\2\21\11\0\11\21\1\170\16\21"
			+ "\25\0\2\21\11\0\2\21\1\171\25\21\25\0\2\21"
			+ "\11\0\3\21\1\172\24\21\25\0\2\21\11\0\3\21"
			+ "\1\173\24\21\25\0\2\21\11\0\26\21\1\174\1\21"
			+ "\25\0\2\21\11\0\2\21\1\175\1\176\24\21\25\0"
			+ "\2\21\11\0\24\21\1\177\3\21\25\0\2\21\11\0"
			+ "\16\21\1\200\11\21\25\0\2\21\11\0\20\21\1\201"
			+ "\7\21\25\0\2\21\11\0\4\21\1\202\23\21\25\0"
			+ "\2\21\11\0\6\21\1\203\21\21\25\0\2\21\11\0"
			+ "\11\21\1\204\16\21\25\0\2\21\11\0\3\21\1\205"
			+ "\24\21\25\0\2\21\11\0\5\21\1\206\22\21\25\0"
			+ "\2\21\11\0\6\21\1\207\6\21\1\210\12\21\25\0"
			+ "\2\21\11\0\1\21\1\211\26\21\25\0\2\21\11\0"
			+ "\7\21\1\212\5\21\1\213\12\21\25\0\2\21\11\0"
			+ "\15\21\1\214\12\21\25\0\2\21\11\0\3\21\1\215"
			+ "\24\21\25\0\2\21\11\0\1\216\27\21\25\0\2\21"
			+ "\11\0\7\21\1\217\20\21\25\0\2\21\11\0\10\21"
			+ "\1\220\17\21\25\0\2\21\11\0\3\21\1\221\24\21"
			+ "\25\0\2\21\11\0\15\21\1\222\12\21\25\0\2\21"
			+ "\11\0\5\21\1\223\22\21\25\0\2\21\11\0\4\21"
			+ "\1\224\23\21\25\0\2\21\11\0\10\21\1\225\17\21"
			+ "\25\0\2\21\11\0\3\21\1\226\24\21\25\0\2\21"
			+ "\11\0\11\21\1\227\16\21\25\0\2\21\11\0\6\21"
			+ "\1\230\21\21\25\0\2\21\11\0\2\21\1\231\25\21"
			+ "\25\0\2\21\11\0\16\21\1\232\11\21\25\0\2\21"
			+ "\11\0\10\21\1\233\17\21\25\0\2\21\11\0\5\21"
			+ "\1\234\22\21\25\0\2\21\11\0\2\21\1\235\1\236"
			+ "\24\21\25\0\2\21\11\0\2\21\1\237\25\21\25\0"
			+ "\2\21\11\0\4\21\1\240\23\21\25\0\2\21\11\0"
			+ "\22\21\1\241\5\21\25\0\2\21\11\0\10\21\1\242"
			+ "\17\21\25\0\2\21\11\0\10\21\1\243\17\21\25\0"
			+ "\2\21\11\0\15\21\1\244\12\21\25\0\2\21\11\0"
			+ "\3\21\1\245\24\21\25\0\2\21\11\0\10\21\1\246"
			+ "\17\21\25\0\2\21\11\0\6\21\1\247\1\250\20\21"
			+ "\25\0\2\21\11\0\1\21\1\251\26\21\25\0\2\21"
			+ "\11\0\1\252\27\21\25\0\2\21\11\0\1\253\27\21"
			+ "\25\0\2\21\11\0\1\254\27\21\25\0\2\21\11\0"
			+ "\6\21\1\255\21\21\25\0\2\21\11\0\12\21\1\256"
			+ "\15\21\25\0\2\21\11\0\3\21\1\257\24\21\25\0"
			+ "\2\21\11\0\25\21\1\260\2\21\25\0\2\21\11\0"
			+ "\7\21\1\261\20\21\25\0\2\21\11\0\1\262\27\21"
			+ "\25\0\2\21\11\0\17\21\1\263\10\21\25\0\2\21"
			+ "\11\0\7\21\1\264\20\21\25\0\2\21\11\0\4\21"
			+ "\1\265\23\21\25\0\2\21\11\0\12\21\1\266\15\21"
			+ "\25\0\2\21\11\0\10\21\1\267\17\21\25\0\2\21"
			+ "\11\0\15\21\1\270\12\21\25\0\2\21\11\0\5\21"
			+ "\1\271\22\21\25\0\2\21\11\0\14\21\1\272\13\21"
			+ "\25\0\2\21\11\0\3\21\1\273\24\21\25\0\2\21"
			+ "\11\0\4\21\1\274\23\21\25\0\2\21\11\0\5\21"
			+ "\1\275\22\21\25\0\2\21\11\0\2\21\1\276\25\21"
			+ "\25\0\2\21\11\0\26\21\1\277\1\21\25\0\2\21"
			+ "\11\0\4\21\1\300\23\21\25\0\2\21\11\0\14\21"
			+ "\1\301\13\21\25\0\2\21\11\0\3\21\1\302\24\21"
			+ "\25\0\2\21\11\0\15\21\1\303\12\21\25\0\2\21"
			+ "\11\0\2\21\1\304\25\21\25\0\2\21\11\0\11\21"
			+ "\1\305\16\21\25\0\2\21\11\0\25\21\1\306\2\21"
			+ "\25\0\2\21\11\0\1\307\27\21\25\0\2\21\11\0"
			+ "\4\21\1\310\23\21\25\0\2\21\11\0\4\21\1\311"
			+ "\23\21\25\0\2\21\11\0\10\21\1\312\17\21\25\0"
			+ "\2\21\11\0\7\21\1\313\20\21\25\0\2\21\11\0"
			+ "\16\21\1\314\11\21\25\0\2\21\11\0\3\21\1\315"
			+ "\24\21\25\0\2\21\11\0\7\21\1\316\20\21\25\0"
			+ "\2\21\11\0\1\317\27\21\25\0\2\21\11\0\10\21"
			+ "\1\320\17\21\25\0\2\21\11\0\1\321\27\21\25\0"
			+ "\2\21\11\0\15\21\1\322\12\21\25\0\2\21\11\0"
			+ "\3\21\1\323\24\21\25\0\2\21\11\0\10\21\1\324"
			+ "\17\21\25\0\2\21\11\0\1\325\27\21\25\0\2\21"
			+ "\11\0\1\326\27\21\25\0\2\21\11\0\5\21\1\327"
			+ "\22\21\25\0\2\21\11\0\3\21\1\330\24\21\25\0"
			+ "\2\21\11\0\4\21\1\331\23\21\25\0\2\21\11\0"
			+ "\14\21\1\332\13\21\25\0\2\21\11\0\15\21\1\333"
			+ "\12\21\25\0\2\21\11\0\2\21\1\334\25\21\25\0"
			+ "\2\21\11\0\11\21\1\335\16\21\25\0\2\21\11\0"
			+ "\11\21\1\336\16\21\25\0\2\21\11\0\17\21\1\337"
			+ "\10\21\25\0\2\21\11\0\10\21\1\340\17\21\25\0"
			+ "\2\21\11\0\11\21\1\341\16\21\25\0\2\21\11\0"
			+ "\20\21\1\342\7\21\25\0\2\21\11\0\3\21\1\343"
			+ "\24\21\25\0\2\21\11\0\23\21\1\344\4\21\25\0"
			+ "\2\21\11\0\10\21\1\345\17\21\25\0\2\21\11\0"
			+ "\7\21\1\346\20\21\25\0\2\21\11\0\7\21\1\347"
			+ "\20\21\25\0\2\21\11\0\22\21\1\350\5\21\25\0"
			+ "\2\21\11\0\5\21\1\351\22\21\25\0\2\21\11\0"
			+ "\3\21\1\352\24\21\25\0\2\21\11\0\5\21\1\353"
			+ "\22\21\25\0\2\21\11\0\15\21\1\354\12\21\25\0"
			+ "\2\21\11\0\5\21\1\355\22\21\25\0\2\21\11\0"
			+ "\11\21\1\356\16\21\25\0\2\21\11\0\20\21\1\357"
			+ "\7\21\25\0\2\21\11\0\6\21\1\360\21\21\25\0"
			+ "\2\21\11\0\10\21\1\361\17\21\25\0\2\21\11\0"
			+ "\16\21\1\362\11\21\25\0\2\21\11\0\2\21\1\363"
			+ "\25\21\25\0\2\21\11\0\5\21\1\364\22\21\25\0"
			+ "\2\21\11\0\1\365\27\21\25\0\2\21\11\0\10\21"
			+ "\1\366\17\21\25\0\2\21\11\0\3\21\1\367\24\21"
			+ "\25\0\2\21\11\0\13\21\1\370\14\21\25\0\2\21"
			+ "\11\0\10\21\1\371\17\21\25\0\2\21\11\0\3\21"
			+ "\1\372\24\21\25\0\2\21\11\0\10\21\1\373\17\21"
			+ "\25\0\2\21\11\0\7\21\1\374\20\21\25\0\2\21"
			+ "\11\0\3\21\1\375\24\21\25\0\2\21\11\0\24\21"
			+ "\1\376\3\21\25\0\2\21\11\0\11\21\1\377\16\21"
			+ "\25\0\2\21\11\0\11\21\1\u0100\16\21\25\0\2\21"
			+ "\11\0\10\21\1\u0101\17\21\25\0\2\21\11\0\10\21"
			+ "\1\u0102\17\21\25\0\2\21\11\0\5\21\1\u0103\22\21"
			+ "\25\0\2\21\11\0\11\21\1\u0104\16\21\25\0\2\21"
			+ "\11\0\10\21\1\u0105\17\21\25\0\2\21\11\0\10\21"
			+ "\1\u0106\17\21\25\0\2\21\11\0\15\21\1\u0107\12\21"
			+ "\25\0\2\21\11\0\3\21\1\u0108\24\21\25\0\2\21"
			+ "\11\0\6\21\1\u0109\21\21\25\0\2\21\11\0\10\21"
			+ "\1\u010a\17\21\25\0\2\21\11\0\3\21\1\u010b\24\21"
			+ "\25\0\2\21\11\0\17\21\1\u010c\10\21\25\0\2\21"
			+ "\11\0\27\21\1\u010d\25\0\2\21\11\0\20\21\1\u010e"
			+ "\7\21\25\0\2\21\11\0\2\21\1\u010f\25\21\25\0"
			+ "\2\21\11\0\10\21\1\u0110\17\21\25\0\2\21\11\0"
			+ "\17\21\1\u0111\10\21\25\0\2\21";

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;

	private static final int ZZ_NO_MATCH = 1;

	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\2\11\3\1\1\11\22\1\1\11\1\1\3\11"
			+ "\2\1\15\11\6\1\1\11\1\1\2\11\1\0\43\1" + "\3\11\261\1";

	private static int[] zzUnpackAction() {
		int[] result = new int[273];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		int[] result = new int[273];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * 
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 144) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	private static int[] zzUnpackRowMap() {
		int[] result = new int[273];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static int[] zzUnpackTrans() {
		int[] result = new int[11200];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * the input device
	 */
	private java.io.Reader zzReader;

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/**
	 * number of newlines encountered up to the start of the matched text
	 */
	private int yyline;

	/**
	 * the number of characters up to the start of the matched text
	 */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/* user code: */

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	protected static TokenType[] tokenTypes = {
			new TokenType(Token.TYPE_STRING, "comment", TokenType.KIND_OTHER),
			new TokenType(Token.TYPE_NUMBER, "number", TokenType.KIND_OTHER),
			new TokenType(Token.TYPE_IDENT, "identifier", TokenType.KIND_OTHER),
			new TokenType(0, "abstract", TokenType.KIND_KEYWORD),
			new TokenType(1, "boolean", TokenType.KIND_KEYWORD),
			new TokenType(2, "break", TokenType.KIND_KEYWORD),
			new TokenType(3, "byte", TokenType.KIND_KEYWORD),
			new TokenType(4, "case", TokenType.KIND_KEYWORD),
			new TokenType(5, "catch", TokenType.KIND_KEYWORD),
			new TokenType(7, "char", TokenType.KIND_KEYWORD),
			new TokenType(8, "class", TokenType.KIND_KEYWORD),
			new TokenType(9, "const", TokenType.KIND_KEYWORD),
			new TokenType(10, "continue", TokenType.KIND_KEYWORD),
			new TokenType(11, "default", TokenType.KIND_KEYWORD),
			new TokenType(12, "do", TokenType.KIND_KEYWORD),
			new TokenType(13, "double", TokenType.KIND_KEYWORD),
			new TokenType(14, "else", TokenType.KIND_KEYWORD),
			new TokenType(15, "extends", TokenType.KIND_KEYWORD),
			new TokenType(16, "final", TokenType.KIND_KEYWORD),
			new TokenType(17, "finally", TokenType.KIND_KEYWORD),
			new TokenType(18, "float", TokenType.KIND_KEYWORD),
			new TokenType(19, "for", TokenType.KIND_KEYWORD),
			new TokenType(20, "goto", TokenType.KIND_KEYWORD),
			new TokenType(21, "if", TokenType.KIND_KEYWORD),
			new TokenType(22, "implements", TokenType.KIND_KEYWORD),
			new TokenType(23, "import", TokenType.KIND_KEYWORD),
			new TokenType(24, "instanceof", TokenType.KIND_KEYWORD),
			new TokenType(25, "int", TokenType.KIND_KEYWORD),
			new TokenType(26, "interface", TokenType.KIND_KEYWORD),
			new TokenType(27, "long", TokenType.KIND_KEYWORD),
			new TokenType(28, "native", TokenType.KIND_KEYWORD),
			new TokenType(29, "new", TokenType.KIND_KEYWORD),
			new TokenType(30, "package", TokenType.KIND_KEYWORD),
			new TokenType(31, "private", TokenType.KIND_KEYWORD),
			new TokenType(32, "protected", TokenType.KIND_KEYWORD),
			new TokenType(33, "public", TokenType.KIND_KEYWORD),
			new TokenType(34, "return", TokenType.KIND_KEYWORD),
			new TokenType(35, "short", TokenType.KIND_KEYWORD),
			new TokenType(36, "static", TokenType.KIND_KEYWORD),
			new TokenType(37, "strictfp", TokenType.KIND_KEYWORD),
			new TokenType(38, "super", TokenType.KIND_KEYWORD),
			new TokenType(39, "switch", TokenType.KIND_KEYWORD),
			new TokenType(40, "synchronied", TokenType.KIND_KEYWORD),
			new TokenType(41, "this", TokenType.KIND_KEYWORD),
			new TokenType(42, "throw", TokenType.KIND_KEYWORD),
			new TokenType(43, "throws", TokenType.KIND_KEYWORD),
			new TokenType(44, "transient", TokenType.KIND_KEYWORD),
			new TokenType(45, "try", TokenType.KIND_KEYWORD),
			new TokenType(46, "void", TokenType.KIND_KEYWORD),
			new TokenType(47, "volatile", TokenType.KIND_KEYWORD),
			new TokenType(48, "while", TokenType.KIND_KEYWORD),
			new TokenType(100, ";", TokenType.KIND_OTHER),
			new TokenType(101, "==", TokenType.KIND_OPERATOR),
			new TokenType(102, "+", TokenType.KIND_OPERATOR),
			new TokenType(103, "-", TokenType.KIND_OPERATOR),
			new TokenType(104, "/", TokenType.KIND_OPERATOR),
			new TokenType(105, "*", TokenType.KIND_OPERATOR),
			new TokenType(106, ",", TokenType.KIND_OPERATOR),
			new TokenType(107, ">=", TokenType.KIND_OPERATOR),
			new TokenType(108, "<=", TokenType.KIND_OPERATOR),
			new TokenType(109, "=", TokenType.KIND_OPERATOR),
			new TokenType(110, "!", TokenType.KIND_OPERATOR),
			new TokenType(111, "\"", TokenType.KIND_OTHER),
			new TokenType(112, "&", TokenType.KIND_OPERATOR),
			new TokenType(113, "{", TokenType.KIND_OTHER),
			new TokenType(114, "}", TokenType.KIND_OTHER),
			new TokenType(115, "(", TokenType.KIND_OTHER),
			new TokenType(116, ")", TokenType.KIND_OTHER),
			new TokenType(117, "[", TokenType.KIND_OTHER),
			new TokenType(118, "]", TokenType.KIND_OTHER),
			new TokenType(119, "|", TokenType.KIND_OPERATOR),
			new TokenType(120, "\\", TokenType.KIND_OTHER),
			new TokenType(121, ".", TokenType.KIND_OPERATOR),
			new TokenType(122, ">", TokenType.KIND_OPERATOR),
			new TokenType(123, "<", TokenType.KIND_OPERATOR),
			new TokenType(124, ":", TokenType.KIND_OTHER),
			new TokenType(125, "?", TokenType.KIND_OTHER) };

	private int comment_count;

	/**
	 * Defaultconstructor : erzeugt einen neuen JavaScanner
	 */
	public JavaScanner() {
		comment_count = 0;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public JavaScanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public JavaScanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.dotplot.tokenizer.service.ITokenizer#getSourceType()
	 */
	public ISourceType getStreamType() {
		return JavaType.type;
	}

	public TokenType[] getTokenTypes() {
		return tokenTypes;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null) {
			zzReader.close();
		}
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * 
	 * @throws java.io.IOException
	 *             if any I/O-Error occurs
	 */
	public Token yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					zzR = false;
					break;
				case '\r':
					yyline++;
					zzR = true;
					break;
				case '\n':
					if (zzR) {
						zzR = false;
					}
					else {
						yyline++;
					}
					break;
				default:
					zzR = false;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				else if (zzAtEOF) {
					zzPeek = false;
				}
				else {
					boolean eof = zzRefill();
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) {
						zzPeek = false;
					}
					else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = zzBufferL[zzCurrentPosL++];
					}
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 17: {
				return (new Token(yytext(), 113, yyline));
			}
			case 85:
				break;
			case 65: {
				return (new KeyWordToken(yytext(), 28, yyline));
			}
			case 86:
				break;
			case 82: {
				return (new KeyWordToken(yytext(), 24, yyline));
			}
			case 87:
				break;
			case 49: {
				return (new KeyWordToken(yytext(), 20, yyline));
			}
			case 88:
				break;
			case 34: {
				return (new Token(yytext(), 101, yyline));
			}
			case 89:
				break;
			case 39: {
				return (new KeyWordToken(yytext(), 45, yyline));
			}
			case 90:
				break;
			case 22: {
				return (new Token(yytext(), 118, yyline));
			}
			case 91:
				break;
			case 44: {
				return (new KeyWordToken(yytext(), 41, yyline));
			}
			case 92:
				break;
			case 13: {
				return (new Token(yytext(), 122, yyline));
			}
			case 93:
				break;
			case 59: {
				return (new KeyWordToken(yytext(), 16, yyline));
			}
			case 94:
				break;
			case 33: {
				return (new KeyWordToken(yytext(), 12, yyline));
			}
			case 95:
				break;
			case 51: {
				return (new KeyWordToken(yytext(), 2, yyline));
			}
			case 96:
				break;
			case 76: {
				return (new KeyWordToken(yytext(), 37, yyline));
			}
			case 97:
				break;
			case 28: {
				return (new Token(yytext(), Token.TYPE_NUMBER, yyline));
			}
			case 98:
				break;
			case 12: {
				return (new Token(yytext(), 106, yyline));
			}
			case 99:
				break;
			case 68: {
				return (new KeyWordToken(yytext(), 33, yyline));
			}
			case 100:
				break;
			case 18: {
				return (new Token(yytext(), 114, yyline));
			}
			case 101:
				break;
			case 15: {
				return (new Token(yytext(), 110, yyline));
			}
			case 102:
				break;
			case 2: {
				return (new EOLToken(yyline));
			}
			case 103:
				break;
			case 40: {
				return (new KeyWordToken(yytext(), 29, yyline));
			}
			case 104:
				break;
			case 46: {
				return (new KeyWordToken(yytext(), 7, yyline));
			}
			case 105:
				break;
			case 43: {
				return (new KeyWordToken(yytext(), 3, yyline));
			}
			case 106:
				break;
			case 41: {
				return (new KeyWordToken(yytext(), 25, yyline));
			}
			case 107:
				break;
			case 32: {
				return (new KeyWordToken(yytext(), 21, yyline));
			}
			case 108:
				break;
			case 3: { /* do nothing */
			}
			case 109:
				break;
			case 10: {
				return (new Token(yytext(), 102, yyline));
			}
			case 110:
				break;
			case 23: {
				return (new Token(yytext(), 119, yyline));
			}
			case 111:
				break;
			case 50: {
				return (new KeyWordToken(yytext(), 46, yyline));
			}
			case 112:
				break;
			case 19: {
				return (new Token(yytext(), 115, yyline));
			}
			case 113:
				break;
			case 54: {
				return (new KeyWordToken(yytext(), 42, yyline));
			}
			case 114:
				break;
			case 14: {
				return (new Token(yytext(), 123, yyline));
			}
			case 115:
				break;
			case 37: {
				comment_count = comment_count + 1;
				return (new Token(yytext(), Token.TYPE_STRING, yyline));
			}
			case 116:
				break;
			case 72: {
				return (new KeyWordToken(yytext(), 17, yyline));
			}
			case 117:
				break;
			case 67: {
				return (new KeyWordToken(yytext(), 13, yyline));
			}
			case 118:
				break;
			case 29: {
				yybegin(YYINITIAL);
				return (new EOLToken(yyline));
			}
			case 119:
				break;
			case 53: {
				return (new KeyWordToken(yytext(), 38, yyline));
			}
			case 120:
				break;
			case 30: {
				yybegin(LINE_COMMENT);
				return (new Token(yytext(), Token.TYPE_STRING, yyline));
			}
			case 121:
				break;
			case 35: {
				return (new Token(yytext(), 107, yyline));
			}
			case 122:
				break;
			case 64: {
				return (new KeyWordToken(yytext(), 34, yyline));
			}
			case 123:
				break;
			case 73: {
				return (new KeyWordToken(yytext(), 30, yyline));
			}
			case 124:
				break;
			case 11: {
				return (new Token(yytext(), 103, yyline));
			}
			case 125:
				break;
			case 6: {
				return (new Token(yytext(), 111, yyline));
			}
			case 126:
				break;
			case 57: {
				return (new KeyWordToken(yytext(), 8, yyline));
			}
			case 127:
				break;
			case 80: {
				return (new KeyWordToken(yytext(), 26, yyline));
			}
			case 128:
				break;
			case 45: {
				return (new KeyWordToken(yytext(), 4, yyline));
			}
			case 129:
				break;
			case 83: {
				return (new KeyWordToken(yytext(), 22, yyline));
			}
			case 130:
				break;
			case 78: {
				return (new KeyWordToken(yytext(), 47, yyline));
			}
			case 131:
				break;
			case 63: {
				return (new KeyWordToken(yytext(), 43, yyline));
			}
			case 132:
				break;
			case 20: {
				return (new Token(yytext(), 116, yyline));
			}
			case 133:
				break;
			case 38: {
				comment_count = comment_count - 1;
				if (comment_count == 0) {
					yybegin(YYINITIAL);
				}
				return (new Token(yytext(), Token.TYPE_STRING, yyline));
			}
			case 134:
				break;
			case 26: {
				return (new Token(yytext(), 124, yyline));
			}
			case 135:
				break;
			case 24: {
				return (new Token(yytext(), 120, yyline));
			}
			case 136:
				break;
			case 58: {
				return (new KeyWordToken(yytext(), 18, yyline));
			}
			case 137:
				break;
			case 48: {
				return (new KeyWordToken(yytext(), 14, yyline));
			}
			case 138:
				break;
			case 31: {
				yybegin(COMMENT);
				comment_count = comment_count + 1;
				return (new Token(yytext(), Token.TYPE_STRING, yyline));
			}
			case 139:
				break;
			case 77: {
				return (new KeyWordToken(yytext(), 10, yyline));
			}
			case 140:
				break;
			case 75: {
				return (new KeyWordToken(yytext(), 0, yyline));
			}
			case 141:
				break;
			case 62: {
				return (new KeyWordToken(yytext(), 39, yyline));
			}
			case 142:
				break;
			case 7: {
				return (new Token(yytext(), Token.TYPE_IDENT, yyline));
			}
			case 143:
				break;
			case 36: {
				return (new Token(yytext(), 108, yyline));
			}
			case 144:
				break;
			case 52: {
				return (new KeyWordToken(yytext(), 35, yyline));
			}
			case 145:
				break;
			case 74: {
				return (new KeyWordToken(yytext(), 31, yyline));
			}
			case 146:
				break;
			case 4: {
				return (new Token(yytext(), 104, yyline));
			}
			case 147:
				break;
			case 16: {
				return (new Token(yytext(), 112, yyline));
			}
			case 148:
				break;
			case 42: {
				return (new KeyWordToken(yytext(), 19, yyline));
			}
			case 149:
				break;
			case 56: {
				return (new KeyWordToken(yytext(), 9, yyline));
			}
			case 150:
				break;
			case 55: {
				return (new KeyWordToken(yytext(), 5, yyline));
			}
			case 151:
				break;
			case 47: {
				return (new KeyWordToken(yytext(), 27, yyline));
			}
			case 152:
				break;
			case 66: {
				return (new KeyWordToken(yytext(), 23, yyline));
			}
			case 153:
				break;
			case 60: {
				return (new KeyWordToken(yytext(), 48, yyline));
			}
			case 154:
				break;
			case 8: {
				return (new Token(yytext(), 100, yyline));
			}
			case 155:
				break;
			case 79: {
				return (new KeyWordToken(yytext(), 44, yyline));
			}
			case 156:
				break;
			case 21: {
				return (new Token(yytext(), 117, yyline));
			}
			case 157:
				break;
			case 84: {
				return (new KeyWordToken(yytext(), 40, yyline));
			}
			case 158:
				break;
			case 27: {
				return (new Token(yytext(), 125, yyline));
			}
			case 159:
				break;
			case 25: {
				return (new Token(yytext(), 121, yyline));
			}
			case 160:
				break;
			case 70: {
				return (new KeyWordToken(yytext(), 15, yyline));
			}
			case 161:
				break;
			case 1: {
				return (new Token(yytext(), Token.TYPE_STRING, yyline));
			}
			case 162:
				break;
			case 71: {
				return (new KeyWordToken(yytext(), 11, yyline));
			}
			case 163:
				break;
			case 69: {
				return (new KeyWordToken(yytext(), 1, yyline));
			}
			case 164:
				break;
			case 61: {
				return (new KeyWordToken(yytext(), 36, yyline));
			}
			case 165:
				break;
			case 9: {
				return (new Token(yytext(), 109, yyline));
			}
			case 166:
				break;
			case 81: {
				return (new KeyWordToken(yytext(), 32, yyline));
			}
			case 167:
				break;
			case 5: {
				return (new Token(yytext(), 105, yyline));
			}
			case 168:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					return null;
				}
				else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * <p/>
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @throws java.io.IOException
	 *             if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead < 0) {
			return true;
		}
		else {
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}
}
