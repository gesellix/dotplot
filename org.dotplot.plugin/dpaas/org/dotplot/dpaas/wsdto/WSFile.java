//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.29 at 11:18:10 PM CEST 
//

package org.dotplot.dpaas.wsdto;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.dotplot.dpaas.ByteRessource;
import org.dotplot.tokenizer.service.CPlusPlusType;
import org.dotplot.tokenizer.service.CType;
import org.dotplot.tokenizer.service.HTMLType;
import org.dotplot.tokenizer.service.JavaType;
import org.dotplot.tokenizer.service.PHPType;
import org.dotplot.tokenizer.service.TextType;
import org.dotplot.tokenizer.service.XMLType;

/**
 * <p>
 * Java class for WSFile complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name=&quot;WSFile&quot;&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base=&quot;{http://www.w3.org/2001/XMLSchema}anyType&quot;&gt;
 *       &lt;sequence&gt;
 *         &lt;element name=&quot;Filename&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot;/&gt;
 *         &lt;element name=&quot;Content&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}base64Binary&quot;/&gt;
 *         &lt;element name=&quot;FileType&quot; type=&quot;{http://dotplot.org/dpaas}FileType&quot;/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "File", propOrder = { "filename", "content", "fileType" })
public class WSFile {

	@XmlElement(name = "Filename", required = true)
	protected String filename;
	@XmlElement(name = "Content", required = true)
	protected byte[] content;
	@XmlElement(name = "FileType", required = true)
	protected String fileType;

	/**
	 * Gets the value of the content property.
	 * 
	 * @return possible object is byte[]
	 */
	public byte[] getContent() {
		return content;
	}

	/**
	 * Gets the value of the filename property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getFilename() {
		return filename;
	}

	/**
	 * Gets the value of the fileType property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getFileType() {
		return fileType;
	}

	/**
	 * Sets the value of the content property.
	 * 
	 * @param value
	 *            allowed object is byte[]
	 */
	public void setContent(byte[] value) {
		this.content = (value);
	}

	/**
	 * Sets the value of the filename property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setFilename(String value) {
		this.filename = value;
	}

	/**
	 * Sets the value of the fileType property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setFileType(String value) {
		this.fileType = value;
	}

	public ByteRessource toByteRessource() {

		ByteRessource tmp = new ByteRessource();
		tmp.setBytearray(content);
		tmp.setFilename(filename);

		if (this.getFileType().equals("Text")) {
			tmp.setType(TextType.type);
		}
		else if (this.getFileType().equals("Java")) {
			tmp.setType(JavaType.type);
		}
		else if (this.getFileType().equals("C")) {
			tmp.setType(CType.type);
		}
		else if (this.getFileType().equals("C++")) {
			tmp.setType(CPlusPlusType.type);
		}
		else if (this.getFileType().equals("XML")) {
			tmp.setType(XMLType.type);
		}
		else if (this.getFileType().equals("HTML")) {
			tmp.setType(HTMLType.type);
		}
		else if (this.getFileType().equals("PHP")) {
			tmp.setType(PHPType.type);
		}
		else {
			tmp.setType(TextType.type);
		}
		return tmp;
	}
}
